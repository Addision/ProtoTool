// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rank.proto

#include "Rank.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class Rank_RankFightReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rank_RankFightReq> _instance;
} _Rank_RankFightReq_default_instance_;
class Rank_RankFightReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rank_RankFightReply> _instance;
} _Rank_RankFightReply_default_instance_;
static void InitDefaultsscc_info_Rank_RankFightReply_Rank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rank_RankFightReply_default_instance_;
    new (ptr) ::Rank_RankFightReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rank_RankFightReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rank_RankFightReply_Rank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rank_RankFightReply_Rank_2eproto}, {}};

static void InitDefaultsscc_info_Rank_RankFightReq_Rank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rank_RankFightReq_default_instance_;
    new (ptr) ::Rank_RankFightReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rank_RankFightReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rank_RankFightReq_Rank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rank_RankFightReq_Rank_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Rank_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Rank_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Rank_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Rank_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rank_RankFightReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rank_RankFightReq, rankid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rank_RankFightReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rank_RankFightReply, rankids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Rank_RankFightReq)},
  { 6, -1, sizeof(::Rank_RankFightReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Rank_RankFightReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Rank_RankFightReply_default_instance_),
};

const char descriptor_table_protodef_Rank_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nRank.proto\032\020PublicData.proto\"#\n\021Rank_R"
  "ankFightReq\022\016\n\006RankId\030\001 \001(\005\"&\n\023Rank_Rank"
  "FightReply\022\017\n\007RankIds\030\001 \003(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Rank_2eproto_deps[1] = {
  &::descriptor_table_PublicData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Rank_2eproto_sccs[2] = {
  &scc_info_Rank_RankFightReply_Rank_2eproto.base,
  &scc_info_Rank_RankFightReq_Rank_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Rank_2eproto_once;
static bool descriptor_table_Rank_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rank_2eproto = {
  &descriptor_table_Rank_2eproto_initialized, descriptor_table_protodef_Rank_2eproto, "Rank.proto", 115,
  &descriptor_table_Rank_2eproto_once, descriptor_table_Rank_2eproto_sccs, descriptor_table_Rank_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_Rank_2eproto::offsets,
  file_level_metadata_Rank_2eproto, 2, file_level_enum_descriptors_Rank_2eproto, file_level_service_descriptors_Rank_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Rank_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Rank_2eproto), true);

// ===================================================================

void Rank_RankFightReq::InitAsDefaultInstance() {
}
class Rank_RankFightReq::_Internal {
 public:
};

Rank_RankFightReq::Rank_RankFightReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rank_RankFightReq)
}
Rank_RankFightReq::Rank_RankFightReq(const Rank_RankFightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rankid_ = from.rankid_;
  // @@protoc_insertion_point(copy_constructor:Rank_RankFightReq)
}

void Rank_RankFightReq::SharedCtor() {
  rankid_ = 0;
}

Rank_RankFightReq::~Rank_RankFightReq() {
  // @@protoc_insertion_point(destructor:Rank_RankFightReq)
  SharedDtor();
}

void Rank_RankFightReq::SharedDtor() {
}

void Rank_RankFightReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rank_RankFightReq& Rank_RankFightReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rank_RankFightReq_Rank_2eproto.base);
  return *internal_default_instance();
}


void Rank_RankFightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Rank_RankFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankid_ = 0;
  _internal_metadata_.Clear();
}

const char* Rank_RankFightReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 RankId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rankid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rank_RankFightReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rank_RankFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RankId = 1;
  if (this->rankid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rankid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rank_RankFightReq)
  return target;
}

size_t Rank_RankFightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rank_RankFightReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 RankId = 1;
  if (this->rankid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rankid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rank_RankFightReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rank_RankFightReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Rank_RankFightReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rank_RankFightReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rank_RankFightReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rank_RankFightReq)
    MergeFrom(*source);
  }
}

void Rank_RankFightReq::MergeFrom(const Rank_RankFightReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rank_RankFightReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rankid() != 0) {
    _internal_set_rankid(from._internal_rankid());
  }
}

void Rank_RankFightReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rank_RankFightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank_RankFightReq::CopyFrom(const Rank_RankFightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rank_RankFightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank_RankFightReq::IsInitialized() const {
  return true;
}

void Rank_RankFightReq::InternalSwap(Rank_RankFightReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rankid_, other->rankid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rank_RankFightReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rank_RankFightReply::InitAsDefaultInstance() {
}
class Rank_RankFightReply::_Internal {
 public:
};

Rank_RankFightReply::Rank_RankFightReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rank_RankFightReply)
}
Rank_RankFightReply::Rank_RankFightReply(const Rank_RankFightReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rankids_(from.rankids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rank_RankFightReply)
}

void Rank_RankFightReply::SharedCtor() {
}

Rank_RankFightReply::~Rank_RankFightReply() {
  // @@protoc_insertion_point(destructor:Rank_RankFightReply)
  SharedDtor();
}

void Rank_RankFightReply::SharedDtor() {
}

void Rank_RankFightReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rank_RankFightReply& Rank_RankFightReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rank_RankFightReply_Rank_2eproto.base);
  return *internal_default_instance();
}


void Rank_RankFightReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rank_RankFightReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankids_.Clear();
  _internal_metadata_.Clear();
}

const char* Rank_RankFightReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 RankIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rankids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_rankids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rank_RankFightReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rank_RankFightReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 RankIds = 1;
  {
    int byte_size = _rankids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_rankids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rank_RankFightReply)
  return target;
}

size_t Rank_RankFightReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rank_RankFightReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 RankIds = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rankids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rankids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rank_RankFightReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rank_RankFightReply)
  GOOGLE_DCHECK_NE(&from, this);
  const Rank_RankFightReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rank_RankFightReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rank_RankFightReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rank_RankFightReply)
    MergeFrom(*source);
  }
}

void Rank_RankFightReply::MergeFrom(const Rank_RankFightReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rank_RankFightReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rankids_.MergeFrom(from.rankids_);
}

void Rank_RankFightReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rank_RankFightReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank_RankFightReply::CopyFrom(const Rank_RankFightReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rank_RankFightReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank_RankFightReply::IsInitialized() const {
  return true;
}

void Rank_RankFightReply::InternalSwap(Rank_RankFightReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rankids_.InternalSwap(&other->rankids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rank_RankFightReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Rank_RankFightReq* Arena::CreateMaybeMessage< ::Rank_RankFightReq >(Arena* arena) {
  return Arena::CreateInternal< ::Rank_RankFightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Rank_RankFightReply* Arena::CreateMaybeMessage< ::Rank_RankFightReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rank_RankFightReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
