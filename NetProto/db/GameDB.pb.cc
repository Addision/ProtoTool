// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameDB.proto

#include "GameDB.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GameDB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityDB_GameDB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameDB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuffDB_GameDB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameDB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipDB_GameDB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameDB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemDB_GameDB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameDB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PetDB_GameDB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameDB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceDB_GameDB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameDB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkillDB_GameDB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameDB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TasksDB_GameDB_2eproto;
class ActivityDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityDB> _instance;
} _ActivityDB_default_instance_;
class PetDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PetDB> _instance;
} _PetDB_default_instance_;
class TasksDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TasksDB> _instance;
} _TasksDB_default_instance_;
class SkillDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkillDB> _instance;
} _SkillDB_default_instance_;
class BuffDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuffDB> _instance;
} _BuffDB_default_instance_;
class ResourceDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceDB> _instance;
} _ResourceDB_default_instance_;
class ItemDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemDB> _instance;
} _ItemDB_default_instance_;
class EquipDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EquipDB> _instance;
} _EquipDB_default_instance_;
class RoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Role> _instance;
} _Role_default_instance_;
static void InitDefaultsscc_info_ActivityDB_GameDB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActivityDB_default_instance_;
    new (ptr) ::ActivityDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ActivityDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityDB_GameDB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivityDB_GameDB_2eproto}, {}};

static void InitDefaultsscc_info_BuffDB_GameDB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuffDB_default_instance_;
    new (ptr) ::BuffDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BuffDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuffDB_GameDB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuffDB_GameDB_2eproto}, {}};

static void InitDefaultsscc_info_EquipDB_GameDB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EquipDB_default_instance_;
    new (ptr) ::EquipDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EquipDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipDB_GameDB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EquipDB_GameDB_2eproto}, {}};

static void InitDefaultsscc_info_ItemDB_GameDB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ItemDB_default_instance_;
    new (ptr) ::ItemDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ItemDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemDB_GameDB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemDB_GameDB_2eproto}, {}};

static void InitDefaultsscc_info_PetDB_GameDB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PetDB_default_instance_;
    new (ptr) ::PetDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PetDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PetDB_GameDB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PetDB_GameDB_2eproto}, {}};

static void InitDefaultsscc_info_ResourceDB_GameDB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResourceDB_default_instance_;
    new (ptr) ::ResourceDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResourceDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceDB_GameDB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceDB_GameDB_2eproto}, {}};

static void InitDefaultsscc_info_Role_GameDB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Role_default_instance_;
    new (ptr) ::Role();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Role::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Role_GameDB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Role_GameDB_2eproto}, {
      &scc_info_ActivityDB_GameDB_2eproto.base,
      &scc_info_PetDB_GameDB_2eproto.base,
      &scc_info_TasksDB_GameDB_2eproto.base,
      &scc_info_SkillDB_GameDB_2eproto.base,
      &scc_info_BuffDB_GameDB_2eproto.base,
      &scc_info_ResourceDB_GameDB_2eproto.base,
      &scc_info_ItemDB_GameDB_2eproto.base,
      &scc_info_EquipDB_GameDB_2eproto.base,}};

static void InitDefaultsscc_info_SkillDB_GameDB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SkillDB_default_instance_;
    new (ptr) ::SkillDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SkillDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkillDB_GameDB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SkillDB_GameDB_2eproto}, {}};

static void InitDefaultsscc_info_TasksDB_GameDB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TasksDB_default_instance_;
    new (ptr) ::TasksDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TasksDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TasksDB_GameDB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TasksDB_GameDB_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameDB_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_GameDB_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameDB_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameDB_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActivityDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PetDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TasksDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SkillDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuffDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResourceDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ItemDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EquipDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Role, role_id_),
  PROTOBUF_FIELD_OFFSET(::Role, account_),
  PROTOBUF_FIELD_OFFSET(::Role, role_name_),
  PROTOBUF_FIELD_OFFSET(::Role, role_sex_),
  PROTOBUF_FIELD_OFFSET(::Role, role_isvalid_),
  PROTOBUF_FIELD_OFFSET(::Role, tm_login_),
  PROTOBUF_FIELD_OFFSET(::Role, tm_logout_),
  PROTOBUF_FIELD_OFFSET(::Role, scene_id_),
  PROTOBUF_FIELD_OFFSET(::Role, pos_x_),
  PROTOBUF_FIELD_OFFSET(::Role, pos_z_),
  PROTOBUF_FIELD_OFFSET(::Role, last_scene_id_),
  PROTOBUF_FIELD_OFFSET(::Role, last_pos_x_),
  PROTOBUF_FIELD_OFFSET(::Role, last_pos_z_),
  PROTOBUF_FIELD_OFFSET(::Role, role_hp_),
  PROTOBUF_FIELD_OFFSET(::Role, role_mp_),
  PROTOBUF_FIELD_OFFSET(::Role, activity_db_),
  PROTOBUF_FIELD_OFFSET(::Role, pet_db_),
  PROTOBUF_FIELD_OFFSET(::Role, tasks_db_),
  PROTOBUF_FIELD_OFFSET(::Role, skill_db_),
  PROTOBUF_FIELD_OFFSET(::Role, buff_db_),
  PROTOBUF_FIELD_OFFSET(::Role, resource_db_),
  PROTOBUF_FIELD_OFFSET(::Role, his_resource_db_),
  PROTOBUF_FIELD_OFFSET(::Role, item_db_),
  PROTOBUF_FIELD_OFFSET(::Role, equip_db_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ActivityDB)},
  { 5, -1, sizeof(::PetDB)},
  { 10, -1, sizeof(::TasksDB)},
  { 15, -1, sizeof(::SkillDB)},
  { 20, -1, sizeof(::BuffDB)},
  { 25, -1, sizeof(::ResourceDB)},
  { 30, -1, sizeof(::ItemDB)},
  { 35, -1, sizeof(::EquipDB)},
  { 40, -1, sizeof(::Role)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ActivityDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PetDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TasksDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SkillDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuffDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ResourceDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ItemDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EquipDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Role_default_instance_),
};

const char descriptor_table_protodef_GameDB_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014GameDB.proto\"\014\n\nActivityDB\"\007\n\005PetDB\"\t\n"
  "\007TasksDB\"\t\n\007SkillDB\"\010\n\006BuffDB\"\014\n\nResourc"
  "eDB\"\010\n\006ItemDB\"\t\n\007EquipDB\"\243\004\n\004Role\022\017\n\007rol"
  "e_id\030\001 \001(\004\022\017\n\007account\030\002 \001(\t\022\021\n\trole_name"
  "\030\003 \001(\t\022\020\n\010role_sex\030\004 \001(\005\022\024\n\014role_isvalid"
  "\030\005 \001(\005\022\020\n\010tm_login\030\006 \001(\003\022\021\n\ttm_logout\030\007 "
  "\001(\003\022\020\n\010scene_id\030\010 \001(\002\022\r\n\005pos_x\030\t \001(\002\022\r\n\005"
  "pos_z\030\n \001(\002\022\025\n\rlast_scene_id\030\013 \001(\002\022\022\n\nla"
  "st_pos_x\030\014 \001(\002\022\022\n\nlast_pos_z\030\r \001(\002\022\017\n\007ro"
  "le_hp\0303 \001(\005\022\017\n\007role_mp\0304 \001(\005\022 \n\013activity"
  "_db\030P \001(\0132\013.ActivityDB\022\026\n\006pet_db\030Q \001(\0132\006"
  ".PetDB\022\032\n\010tasks_db\030R \001(\0132\010.TasksDB\022\032\n\010sk"
  "ill_db\030S \001(\0132\010.SkillDB\022\030\n\007buff_db\030T \001(\0132"
  "\007.BuffDB\022 \n\013resource_db\030U \001(\0132\013.Resource"
  "DB\022$\n\017his_resource_db\030V \001(\0132\013.ResourceDB"
  "\022\030\n\007item_db\030W \001(\0132\007.ItemDB\022\032\n\010equip_db\030X"
  " \001(\0132\010.EquipDBb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameDB_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameDB_2eproto_sccs[9] = {
  &scc_info_ActivityDB_GameDB_2eproto.base,
  &scc_info_BuffDB_GameDB_2eproto.base,
  &scc_info_EquipDB_GameDB_2eproto.base,
  &scc_info_ItemDB_GameDB_2eproto.base,
  &scc_info_PetDB_GameDB_2eproto.base,
  &scc_info_ResourceDB_GameDB_2eproto.base,
  &scc_info_Role_GameDB_2eproto.base,
  &scc_info_SkillDB_GameDB_2eproto.base,
  &scc_info_TasksDB_GameDB_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameDB_2eproto_once;
static bool descriptor_table_GameDB_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameDB_2eproto = {
  &descriptor_table_GameDB_2eproto_initialized, descriptor_table_protodef_GameDB_2eproto, "GameDB.proto", 662,
  &descriptor_table_GameDB_2eproto_once, descriptor_table_GameDB_2eproto_sccs, descriptor_table_GameDB_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_GameDB_2eproto::offsets,
  file_level_metadata_GameDB_2eproto, 9, file_level_enum_descriptors_GameDB_2eproto, file_level_service_descriptors_GameDB_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameDB_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameDB_2eproto)), true);

// ===================================================================

void ActivityDB::InitAsDefaultInstance() {
}
class ActivityDB::_Internal {
 public:
};

ActivityDB::ActivityDB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityDB)
}
ActivityDB::ActivityDB(const ActivityDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ActivityDB)
}

void ActivityDB::SharedCtor() {
}

ActivityDB::~ActivityDB() {
  // @@protoc_insertion_point(destructor:ActivityDB)
  SharedDtor();
}

void ActivityDB::SharedDtor() {
}

void ActivityDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityDB& ActivityDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityDB_GameDB_2eproto.base);
  return *internal_default_instance();
}


void ActivityDB::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ActivityDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityDB)
  return target;
}

size_t ActivityDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityDB)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityDB)
    MergeFrom(*source);
  }
}

void ActivityDB::MergeFrom(const ActivityDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ActivityDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityDB::CopyFrom(const ActivityDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityDB::IsInitialized() const {
  return true;
}

void ActivityDB::InternalSwap(ActivityDB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PetDB::InitAsDefaultInstance() {
}
class PetDB::_Internal {
 public:
};

PetDB::PetDB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PetDB)
}
PetDB::PetDB(const PetDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PetDB)
}

void PetDB::SharedCtor() {
}

PetDB::~PetDB() {
  // @@protoc_insertion_point(destructor:PetDB)
  SharedDtor();
}

void PetDB::SharedDtor() {
}

void PetDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PetDB& PetDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PetDB_GameDB_2eproto.base);
  return *internal_default_instance();
}


void PetDB::Clear() {
// @@protoc_insertion_point(message_clear_start:PetDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PetDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PetDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PetDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PetDB)
  return target;
}

size_t PetDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PetDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PetDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PetDB)
  GOOGLE_DCHECK_NE(&from, this);
  const PetDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PetDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PetDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PetDB)
    MergeFrom(*source);
  }
}

void PetDB::MergeFrom(const PetDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PetDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PetDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PetDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetDB::CopyFrom(const PetDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PetDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetDB::IsInitialized() const {
  return true;
}

void PetDB::InternalSwap(PetDB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PetDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TasksDB::InitAsDefaultInstance() {
}
class TasksDB::_Internal {
 public:
};

TasksDB::TasksDB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TasksDB)
}
TasksDB::TasksDB(const TasksDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TasksDB)
}

void TasksDB::SharedCtor() {
}

TasksDB::~TasksDB() {
  // @@protoc_insertion_point(destructor:TasksDB)
  SharedDtor();
}

void TasksDB::SharedDtor() {
}

void TasksDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TasksDB& TasksDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TasksDB_GameDB_2eproto.base);
  return *internal_default_instance();
}


void TasksDB::Clear() {
// @@protoc_insertion_point(message_clear_start:TasksDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* TasksDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TasksDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TasksDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TasksDB)
  return target;
}

size_t TasksDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TasksDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TasksDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TasksDB)
  GOOGLE_DCHECK_NE(&from, this);
  const TasksDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TasksDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TasksDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TasksDB)
    MergeFrom(*source);
  }
}

void TasksDB::MergeFrom(const TasksDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TasksDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TasksDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TasksDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TasksDB::CopyFrom(const TasksDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TasksDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TasksDB::IsInitialized() const {
  return true;
}

void TasksDB::InternalSwap(TasksDB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TasksDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SkillDB::InitAsDefaultInstance() {
}
class SkillDB::_Internal {
 public:
};

SkillDB::SkillDB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkillDB)
}
SkillDB::SkillDB(const SkillDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SkillDB)
}

void SkillDB::SharedCtor() {
}

SkillDB::~SkillDB() {
  // @@protoc_insertion_point(destructor:SkillDB)
  SharedDtor();
}

void SkillDB::SharedDtor() {
}

void SkillDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkillDB& SkillDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkillDB_GameDB_2eproto.base);
  return *internal_default_instance();
}


void SkillDB::Clear() {
// @@protoc_insertion_point(message_clear_start:SkillDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SkillDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SkillDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkillDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SkillDB)
  return target;
}

size_t SkillDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SkillDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkillDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SkillDB)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkillDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SkillDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SkillDB)
    MergeFrom(*source);
  }
}

void SkillDB::MergeFrom(const SkillDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SkillDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SkillDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SkillDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDB::CopyFrom(const SkillDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SkillDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDB::IsInitialized() const {
  return true;
}

void SkillDB::InternalSwap(SkillDB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuffDB::InitAsDefaultInstance() {
}
class BuffDB::_Internal {
 public:
};

BuffDB::BuffDB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BuffDB)
}
BuffDB::BuffDB(const BuffDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BuffDB)
}

void BuffDB::SharedCtor() {
}

BuffDB::~BuffDB() {
  // @@protoc_insertion_point(destructor:BuffDB)
  SharedDtor();
}

void BuffDB::SharedDtor() {
}

void BuffDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuffDB& BuffDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuffDB_GameDB_2eproto.base);
  return *internal_default_instance();
}


void BuffDB::Clear() {
// @@protoc_insertion_point(message_clear_start:BuffDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* BuffDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuffDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuffDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuffDB)
  return target;
}

size_t BuffDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuffDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuffDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuffDB)
  GOOGLE_DCHECK_NE(&from, this);
  const BuffDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuffDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuffDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuffDB)
    MergeFrom(*source);
  }
}

void BuffDB::MergeFrom(const BuffDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuffDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BuffDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuffDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDB::CopyFrom(const BuffDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuffDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDB::IsInitialized() const {
  return true;
}

void BuffDB::InternalSwap(BuffDB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuffDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceDB::InitAsDefaultInstance() {
}
class ResourceDB::_Internal {
 public:
};

ResourceDB::ResourceDB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResourceDB)
}
ResourceDB::ResourceDB(const ResourceDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ResourceDB)
}

void ResourceDB::SharedCtor() {
}

ResourceDB::~ResourceDB() {
  // @@protoc_insertion_point(destructor:ResourceDB)
  SharedDtor();
}

void ResourceDB::SharedDtor() {
}

void ResourceDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceDB& ResourceDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceDB_GameDB_2eproto.base);
  return *internal_default_instance();
}


void ResourceDB::Clear() {
// @@protoc_insertion_point(message_clear_start:ResourceDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ResourceDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResourceDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResourceDB)
  return target;
}

size_t ResourceDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResourceDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResourceDB)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResourceDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResourceDB)
    MergeFrom(*source);
  }
}

void ResourceDB::MergeFrom(const ResourceDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResourceDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResourceDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResourceDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceDB::CopyFrom(const ResourceDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResourceDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceDB::IsInitialized() const {
  return true;
}

void ResourceDB::InternalSwap(ResourceDB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemDB::InitAsDefaultInstance() {
}
class ItemDB::_Internal {
 public:
};

ItemDB::ItemDB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ItemDB)
}
ItemDB::ItemDB(const ItemDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ItemDB)
}

void ItemDB::SharedCtor() {
}

ItemDB::~ItemDB() {
  // @@protoc_insertion_point(destructor:ItemDB)
  SharedDtor();
}

void ItemDB::SharedDtor() {
}

void ItemDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemDB& ItemDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemDB_GameDB_2eproto.base);
  return *internal_default_instance();
}


void ItemDB::Clear() {
// @@protoc_insertion_point(message_clear_start:ItemDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ItemDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ItemDB)
  return target;
}

size_t ItemDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ItemDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ItemDB)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ItemDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ItemDB)
    MergeFrom(*source);
  }
}

void ItemDB::MergeFrom(const ItemDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ItemDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ItemDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ItemDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemDB::CopyFrom(const ItemDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ItemDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemDB::IsInitialized() const {
  return true;
}

void ItemDB::InternalSwap(ItemDB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EquipDB::InitAsDefaultInstance() {
}
class EquipDB::_Internal {
 public:
};

EquipDB::EquipDB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipDB)
}
EquipDB::EquipDB(const EquipDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EquipDB)
}

void EquipDB::SharedCtor() {
}

EquipDB::~EquipDB() {
  // @@protoc_insertion_point(destructor:EquipDB)
  SharedDtor();
}

void EquipDB::SharedDtor() {
}

void EquipDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EquipDB& EquipDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EquipDB_GameDB_2eproto.base);
  return *internal_default_instance();
}


void EquipDB::Clear() {
// @@protoc_insertion_point(message_clear_start:EquipDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* EquipDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquipDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipDB)
  return target;
}

size_t EquipDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EquipDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EquipDB)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EquipDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EquipDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EquipDB)
    MergeFrom(*source);
  }
}

void EquipDB::MergeFrom(const EquipDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EquipDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EquipDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EquipDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipDB::CopyFrom(const EquipDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EquipDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipDB::IsInitialized() const {
  return true;
}

void EquipDB::InternalSwap(EquipDB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Role::InitAsDefaultInstance() {
  ::_Role_default_instance_._instance.get_mutable()->activity_db_ = const_cast< ::ActivityDB*>(
      ::ActivityDB::internal_default_instance());
  ::_Role_default_instance_._instance.get_mutable()->pet_db_ = const_cast< ::PetDB*>(
      ::PetDB::internal_default_instance());
  ::_Role_default_instance_._instance.get_mutable()->tasks_db_ = const_cast< ::TasksDB*>(
      ::TasksDB::internal_default_instance());
  ::_Role_default_instance_._instance.get_mutable()->skill_db_ = const_cast< ::SkillDB*>(
      ::SkillDB::internal_default_instance());
  ::_Role_default_instance_._instance.get_mutable()->buff_db_ = const_cast< ::BuffDB*>(
      ::BuffDB::internal_default_instance());
  ::_Role_default_instance_._instance.get_mutable()->resource_db_ = const_cast< ::ResourceDB*>(
      ::ResourceDB::internal_default_instance());
  ::_Role_default_instance_._instance.get_mutable()->his_resource_db_ = const_cast< ::ResourceDB*>(
      ::ResourceDB::internal_default_instance());
  ::_Role_default_instance_._instance.get_mutable()->item_db_ = const_cast< ::ItemDB*>(
      ::ItemDB::internal_default_instance());
  ::_Role_default_instance_._instance.get_mutable()->equip_db_ = const_cast< ::EquipDB*>(
      ::EquipDB::internal_default_instance());
}
class Role::_Internal {
 public:
  static const ::ActivityDB& activity_db(const Role* msg);
  static const ::PetDB& pet_db(const Role* msg);
  static const ::TasksDB& tasks_db(const Role* msg);
  static const ::SkillDB& skill_db(const Role* msg);
  static const ::BuffDB& buff_db(const Role* msg);
  static const ::ResourceDB& resource_db(const Role* msg);
  static const ::ResourceDB& his_resource_db(const Role* msg);
  static const ::ItemDB& item_db(const Role* msg);
  static const ::EquipDB& equip_db(const Role* msg);
};

const ::ActivityDB&
Role::_Internal::activity_db(const Role* msg) {
  return *msg->activity_db_;
}
const ::PetDB&
Role::_Internal::pet_db(const Role* msg) {
  return *msg->pet_db_;
}
const ::TasksDB&
Role::_Internal::tasks_db(const Role* msg) {
  return *msg->tasks_db_;
}
const ::SkillDB&
Role::_Internal::skill_db(const Role* msg) {
  return *msg->skill_db_;
}
const ::BuffDB&
Role::_Internal::buff_db(const Role* msg) {
  return *msg->buff_db_;
}
const ::ResourceDB&
Role::_Internal::resource_db(const Role* msg) {
  return *msg->resource_db_;
}
const ::ResourceDB&
Role::_Internal::his_resource_db(const Role* msg) {
  return *msg->his_resource_db_;
}
const ::ItemDB&
Role::_Internal::item_db(const Role* msg) {
  return *msg->item_db_;
}
const ::EquipDB&
Role::_Internal::equip_db(const Role* msg) {
  return *msg->equip_db_;
}
Role::Role()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Role)
}
Role::Role(const Role& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_name().empty()) {
    role_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from._internal_has_activity_db()) {
    activity_db_ = new ::ActivityDB(*from.activity_db_);
  } else {
    activity_db_ = nullptr;
  }
  if (from._internal_has_pet_db()) {
    pet_db_ = new ::PetDB(*from.pet_db_);
  } else {
    pet_db_ = nullptr;
  }
  if (from._internal_has_tasks_db()) {
    tasks_db_ = new ::TasksDB(*from.tasks_db_);
  } else {
    tasks_db_ = nullptr;
  }
  if (from._internal_has_skill_db()) {
    skill_db_ = new ::SkillDB(*from.skill_db_);
  } else {
    skill_db_ = nullptr;
  }
  if (from._internal_has_buff_db()) {
    buff_db_ = new ::BuffDB(*from.buff_db_);
  } else {
    buff_db_ = nullptr;
  }
  if (from._internal_has_resource_db()) {
    resource_db_ = new ::ResourceDB(*from.resource_db_);
  } else {
    resource_db_ = nullptr;
  }
  if (from._internal_has_his_resource_db()) {
    his_resource_db_ = new ::ResourceDB(*from.his_resource_db_);
  } else {
    his_resource_db_ = nullptr;
  }
  if (from._internal_has_item_db()) {
    item_db_ = new ::ItemDB(*from.item_db_);
  } else {
    item_db_ = nullptr;
  }
  if (from._internal_has_equip_db()) {
    equip_db_ = new ::EquipDB(*from.equip_db_);
  } else {
    equip_db_ = nullptr;
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_mp_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(role_mp_));
  // @@protoc_insertion_point(copy_constructor:Role)
}

void Role::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Role_GameDB_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&activity_db_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_mp_) -
      reinterpret_cast<char*>(&activity_db_)) + sizeof(role_mp_));
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:Role)
  SharedDtor();
}

void Role::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete activity_db_;
  if (this != internal_default_instance()) delete pet_db_;
  if (this != internal_default_instance()) delete tasks_db_;
  if (this != internal_default_instance()) delete skill_db_;
  if (this != internal_default_instance()) delete buff_db_;
  if (this != internal_default_instance()) delete resource_db_;
  if (this != internal_default_instance()) delete his_resource_db_;
  if (this != internal_default_instance()) delete item_db_;
  if (this != internal_default_instance()) delete equip_db_;
}

void Role::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Role& Role::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Role_GameDB_2eproto.base);
  return *internal_default_instance();
}


void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:Role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && activity_db_ != nullptr) {
    delete activity_db_;
  }
  activity_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pet_db_ != nullptr) {
    delete pet_db_;
  }
  pet_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tasks_db_ != nullptr) {
    delete tasks_db_;
  }
  tasks_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && skill_db_ != nullptr) {
    delete skill_db_;
  }
  skill_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && buff_db_ != nullptr) {
    delete buff_db_;
  }
  buff_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resource_db_ != nullptr) {
    delete resource_db_;
  }
  resource_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && his_resource_db_ != nullptr) {
    delete his_resource_db_;
  }
  his_resource_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_db_ != nullptr) {
    delete item_db_;
  }
  item_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && equip_db_ != nullptr) {
    delete equip_db_;
  }
  equip_db_ = nullptr;
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_mp_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(role_mp_));
  _internal_metadata_.Clear();
}

const char* Role::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Role.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Role.role_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 role_sex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          role_sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 role_isvalid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          role_isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tm_login = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tm_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tm_logout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tm_logout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float scene_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float last_scene_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          last_scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float last_pos_x = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          last_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float last_pos_z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          last_pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 role_hp = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          role_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 role_mp = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          role_mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActivityDB activity_db = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PetDB pet_db = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pet_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TasksDB tasks_db = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tasks_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SkillDB skill_db = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_skill_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuffDB buff_db = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_buff_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ResourceDB resource_db = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ResourceDB his_resource_db = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_his_resource_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ItemDB item_db = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EquipDB equip_db = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_equip_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Role::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 role_id = 1;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Role.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // string role_name = 3;
  if (this->role_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Role.role_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_role_name(), target);
  }

  // int32 role_sex = 4;
  if (this->role_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_role_sex(), target);
  }

  // int32 role_isvalid = 5;
  if (this->role_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_role_isvalid(), target);
  }

  // int64 tm_login = 6;
  if (this->tm_login() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_tm_login(), target);
  }

  // int64 tm_logout = 7;
  if (this->tm_logout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_tm_logout(), target);
  }

  // float scene_id = 8;
  if (!(this->scene_id() <= 0 && this->scene_id() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_scene_id(), target);
  }

  // float pos_x = 9;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_pos_x(), target);
  }

  // float pos_z = 10;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_pos_z(), target);
  }

  // float last_scene_id = 11;
  if (!(this->last_scene_id() <= 0 && this->last_scene_id() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_last_scene_id(), target);
  }

  // float last_pos_x = 12;
  if (!(this->last_pos_x() <= 0 && this->last_pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_last_pos_x(), target);
  }

  // float last_pos_z = 13;
  if (!(this->last_pos_z() <= 0 && this->last_pos_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_last_pos_z(), target);
  }

  // int32 role_hp = 51;
  if (this->role_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(51, this->_internal_role_hp(), target);
  }

  // int32 role_mp = 52;
  if (this->role_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(52, this->_internal_role_mp(), target);
  }

  // .ActivityDB activity_db = 80;
  if (this->has_activity_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        80, _Internal::activity_db(this), target, stream);
  }

  // .PetDB pet_db = 81;
  if (this->has_pet_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        81, _Internal::pet_db(this), target, stream);
  }

  // .TasksDB tasks_db = 82;
  if (this->has_tasks_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        82, _Internal::tasks_db(this), target, stream);
  }

  // .SkillDB skill_db = 83;
  if (this->has_skill_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        83, _Internal::skill_db(this), target, stream);
  }

  // .BuffDB buff_db = 84;
  if (this->has_buff_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        84, _Internal::buff_db(this), target, stream);
  }

  // .ResourceDB resource_db = 85;
  if (this->has_resource_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        85, _Internal::resource_db(this), target, stream);
  }

  // .ResourceDB his_resource_db = 86;
  if (this->has_his_resource_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        86, _Internal::his_resource_db(this), target, stream);
  }

  // .ItemDB item_db = 87;
  if (this->has_item_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        87, _Internal::item_db(this), target, stream);
  }

  // .EquipDB equip_db = 88;
  if (this->has_equip_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        88, _Internal::equip_db(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Role)
  return target;
}

size_t Role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Role)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string role_name = 3;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .ActivityDB activity_db = 80;
  if (this->has_activity_db()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activity_db_);
  }

  // .PetDB pet_db = 81;
  if (this->has_pet_db()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pet_db_);
  }

  // .TasksDB tasks_db = 82;
  if (this->has_tasks_db()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tasks_db_);
  }

  // .SkillDB skill_db = 83;
  if (this->has_skill_db()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skill_db_);
  }

  // .BuffDB buff_db = 84;
  if (this->has_buff_db()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buff_db_);
  }

  // .ResourceDB resource_db = 85;
  if (this->has_resource_db()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_db_);
  }

  // .ResourceDB his_resource_db = 86;
  if (this->has_his_resource_db()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *his_resource_db_);
  }

  // .ItemDB item_db = 87;
  if (this->has_item_db()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_db_);
  }

  // .EquipDB equip_db = 88;
  if (this->has_equip_db()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *equip_db_);
  }

  // uint64 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  // int32 role_sex = 4;
  if (this->role_sex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_sex());
  }

  // int32 role_isvalid = 5;
  if (this->role_isvalid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_isvalid());
  }

  // int64 tm_login = 6;
  if (this->tm_login() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tm_login());
  }

  // int64 tm_logout = 7;
  if (this->tm_logout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tm_logout());
  }

  // float scene_id = 8;
  if (!(this->scene_id() <= 0 && this->scene_id() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_x = 9;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_z = 10;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float last_scene_id = 11;
  if (!(this->last_scene_id() <= 0 && this->last_scene_id() >= 0)) {
    total_size += 1 + 4;
  }

  // float last_pos_x = 12;
  if (!(this->last_pos_x() <= 0 && this->last_pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float last_pos_z = 13;
  if (!(this->last_pos_z() <= 0 && this->last_pos_z() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 role_hp = 51;
  if (this->role_hp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_hp());
  }

  // int32 role_mp = 52;
  if (this->role_mp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_mp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Role::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Role)
  GOOGLE_DCHECK_NE(&from, this);
  const Role* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Role>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Role)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Role)
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Role)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.has_activity_db()) {
    _internal_mutable_activity_db()->::ActivityDB::MergeFrom(from._internal_activity_db());
  }
  if (from.has_pet_db()) {
    _internal_mutable_pet_db()->::PetDB::MergeFrom(from._internal_pet_db());
  }
  if (from.has_tasks_db()) {
    _internal_mutable_tasks_db()->::TasksDB::MergeFrom(from._internal_tasks_db());
  }
  if (from.has_skill_db()) {
    _internal_mutable_skill_db()->::SkillDB::MergeFrom(from._internal_skill_db());
  }
  if (from.has_buff_db()) {
    _internal_mutable_buff_db()->::BuffDB::MergeFrom(from._internal_buff_db());
  }
  if (from.has_resource_db()) {
    _internal_mutable_resource_db()->::ResourceDB::MergeFrom(from._internal_resource_db());
  }
  if (from.has_his_resource_db()) {
    _internal_mutable_his_resource_db()->::ResourceDB::MergeFrom(from._internal_his_resource_db());
  }
  if (from.has_item_db()) {
    _internal_mutable_item_db()->::ItemDB::MergeFrom(from._internal_item_db());
  }
  if (from.has_equip_db()) {
    _internal_mutable_equip_db()->::EquipDB::MergeFrom(from._internal_equip_db());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.role_sex() != 0) {
    _internal_set_role_sex(from._internal_role_sex());
  }
  if (from.role_isvalid() != 0) {
    _internal_set_role_isvalid(from._internal_role_isvalid());
  }
  if (from.tm_login() != 0) {
    _internal_set_tm_login(from._internal_tm_login());
  }
  if (from.tm_logout() != 0) {
    _internal_set_tm_logout(from._internal_tm_logout());
  }
  if (!(from.scene_id() <= 0 && from.scene_id() >= 0)) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (!(from.pos_z() <= 0 && from.pos_z() >= 0)) {
    _internal_set_pos_z(from._internal_pos_z());
  }
  if (!(from.last_scene_id() <= 0 && from.last_scene_id() >= 0)) {
    _internal_set_last_scene_id(from._internal_last_scene_id());
  }
  if (!(from.last_pos_x() <= 0 && from.last_pos_x() >= 0)) {
    _internal_set_last_pos_x(from._internal_last_pos_x());
  }
  if (!(from.last_pos_z() <= 0 && from.last_pos_z() >= 0)) {
    _internal_set_last_pos_z(from._internal_last_pos_z());
  }
  if (from.role_hp() != 0) {
    _internal_set_role_hp(from._internal_role_hp());
  }
  if (from.role_mp() != 0) {
    _internal_set_role_mp(from._internal_role_mp());
  }
}

void Role::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  return true;
}

void Role::InternalSwap(Role* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  role_name_.Swap(&other->role_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(activity_db_, other->activity_db_);
  swap(pet_db_, other->pet_db_);
  swap(tasks_db_, other->tasks_db_);
  swap(skill_db_, other->skill_db_);
  swap(buff_db_, other->buff_db_);
  swap(resource_db_, other->resource_db_);
  swap(his_resource_db_, other->his_resource_db_);
  swap(item_db_, other->item_db_);
  swap(equip_db_, other->equip_db_);
  swap(role_id_, other->role_id_);
  swap(role_sex_, other->role_sex_);
  swap(role_isvalid_, other->role_isvalid_);
  swap(tm_login_, other->tm_login_);
  swap(tm_logout_, other->tm_logout_);
  swap(scene_id_, other->scene_id_);
  swap(pos_x_, other->pos_x_);
  swap(pos_z_, other->pos_z_);
  swap(last_scene_id_, other->last_scene_id_);
  swap(last_pos_x_, other->last_pos_x_);
  swap(last_pos_z_, other->last_pos_z_);
  swap(role_hp_, other->role_hp_);
  swap(role_mp_, other->role_mp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Role::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ActivityDB* Arena::CreateMaybeMessage< ::ActivityDB >(Arena* arena) {
  return Arena::CreateInternal< ::ActivityDB >(arena);
}
template<> PROTOBUF_NOINLINE ::PetDB* Arena::CreateMaybeMessage< ::PetDB >(Arena* arena) {
  return Arena::CreateInternal< ::PetDB >(arena);
}
template<> PROTOBUF_NOINLINE ::TasksDB* Arena::CreateMaybeMessage< ::TasksDB >(Arena* arena) {
  return Arena::CreateInternal< ::TasksDB >(arena);
}
template<> PROTOBUF_NOINLINE ::SkillDB* Arena::CreateMaybeMessage< ::SkillDB >(Arena* arena) {
  return Arena::CreateInternal< ::SkillDB >(arena);
}
template<> PROTOBUF_NOINLINE ::BuffDB* Arena::CreateMaybeMessage< ::BuffDB >(Arena* arena) {
  return Arena::CreateInternal< ::BuffDB >(arena);
}
template<> PROTOBUF_NOINLINE ::ResourceDB* Arena::CreateMaybeMessage< ::ResourceDB >(Arena* arena) {
  return Arena::CreateInternal< ::ResourceDB >(arena);
}
template<> PROTOBUF_NOINLINE ::ItemDB* Arena::CreateMaybeMessage< ::ItemDB >(Arena* arena) {
  return Arena::CreateInternal< ::ItemDB >(arena);
}
template<> PROTOBUF_NOINLINE ::EquipDB* Arena::CreateMaybeMessage< ::EquipDB >(Arena* arena) {
  return Arena::CreateInternal< ::EquipDB >(arena);
}
template<> PROTOBUF_NOINLINE ::Role* Arena::CreateMaybeMessage< ::Role >(Arena* arena) {
  return Arena::CreateInternal< ::Role >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
