// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#include "Chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class Chat_ChatReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chat_ChatReq> _instance;
} _Chat_ChatReq_default_instance_;
class Chat_ChatReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chat_ChatReply> _instance;
} _Chat_ChatReply_default_instance_;
static void InitDefaultsscc_info_Chat_ChatReply_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Chat_ChatReply_default_instance_;
    new (ptr) ::Chat_ChatReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat_ChatReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chat_ChatReply_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Chat_ChatReply_Chat_2eproto}, {}};

static void InitDefaultsscc_info_Chat_ChatReq_Chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Chat_ChatReq_default_instance_;
    new (ptr) ::Chat_ChatReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat_ChatReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chat_ChatReq_Chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Chat_ChatReq_Chat_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Chat_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Chat_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Chat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat_ChatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat_ChatReq, channel_),
  PROTOBUF_FIELD_OFFSET(::Chat_ChatReq, chat_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat_ChatReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat_ChatReply, ret_),
  PROTOBUF_FIELD_OFFSET(::Chat_ChatReply, chat_msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Chat_ChatReq)},
  { 7, -1, sizeof(::Chat_ChatReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Chat_ChatReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Chat_ChatReply_default_instance_),
};

const char descriptor_table_protodef_Chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nChat.proto\032\014Common.proto\"1\n\014Chat_ChatR"
  "eq\022\017\n\007channel\030\001 \001(\005\022\020\n\010chat_msg\030\002 \001(\t\"/\n"
  "\016Chat_ChatReply\022\013\n\003ret\030\001 \001(\005\022\020\n\010chat_msg"
  "\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Chat_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Chat_2eproto_sccs[2] = {
  &scc_info_Chat_ChatReply_Chat_2eproto.base,
  &scc_info_Chat_ChatReq_Chat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Chat_2eproto_once;
static bool descriptor_table_Chat_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chat_2eproto = {
  &descriptor_table_Chat_2eproto_initialized, descriptor_table_protodef_Chat_2eproto, "Chat.proto", 134,
  &descriptor_table_Chat_2eproto_once, descriptor_table_Chat_2eproto_sccs, descriptor_table_Chat_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_Chat_2eproto::offsets,
  file_level_metadata_Chat_2eproto, 2, file_level_enum_descriptors_Chat_2eproto, file_level_service_descriptors_Chat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Chat_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Chat_2eproto)), true);

// ===================================================================

void Chat_ChatReq::InitAsDefaultInstance() {
}
class Chat_ChatReq::_Internal {
 public:
};

Chat_ChatReq::Chat_ChatReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat_ChatReq)
}
Chat_ChatReq::Chat_ChatReq(const Chat_ChatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_msg().empty()) {
    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:Chat_ChatReq)
}

void Chat_ChatReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chat_ChatReq_Chat_2eproto.base);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
}

Chat_ChatReq::~Chat_ChatReq() {
  // @@protoc_insertion_point(destructor:Chat_ChatReq)
  SharedDtor();
}

void Chat_ChatReq::SharedDtor() {
  chat_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chat_ChatReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chat_ChatReq& Chat_ChatReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chat_ChatReq_Chat_2eproto.base);
  return *internal_default_instance();
}


void Chat_ChatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat_ChatReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
  _internal_metadata_.Clear();
}

const char* Chat_ChatReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chat_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat_ChatReq.chat_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chat_ChatReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat_ChatReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // string chat_msg = 2;
  if (this->chat_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_msg().data(), static_cast<int>(this->_internal_chat_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Chat_ChatReq.chat_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat_ChatReq)
  return target;
}

size_t Chat_ChatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat_ChatReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chat_msg = 2;
  if (this->chat_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_msg());
  }

  // int32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chat_ChatReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat_ChatReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Chat_ChatReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chat_ChatReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat_ChatReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat_ChatReq)
    MergeFrom(*source);
  }
}

void Chat_ChatReq::MergeFrom(const Chat_ChatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat_ChatReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chat_msg().size() > 0) {

    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void Chat_ChatReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat_ChatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat_ChatReq::CopyFrom(const Chat_ChatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat_ChatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_ChatReq::IsInitialized() const {
  return true;
}

void Chat_ChatReq::InternalSwap(Chat_ChatReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chat_msg_.Swap(&other->chat_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat_ChatReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Chat_ChatReply::InitAsDefaultInstance() {
}
class Chat_ChatReply::_Internal {
 public:
};

Chat_ChatReply::Chat_ChatReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat_ChatReply)
}
Chat_ChatReply::Chat_ChatReply(const Chat_ChatReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_msg().empty()) {
    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Chat_ChatReply)
}

void Chat_ChatReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chat_ChatReply_Chat_2eproto.base);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
}

Chat_ChatReply::~Chat_ChatReply() {
  // @@protoc_insertion_point(destructor:Chat_ChatReply)
  SharedDtor();
}

void Chat_ChatReply::SharedDtor() {
  chat_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chat_ChatReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chat_ChatReply& Chat_ChatReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chat_ChatReply_Chat_2eproto.base);
  return *internal_default_instance();
}


void Chat_ChatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat_ChatReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* Chat_ChatReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chat_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat_ChatReply.chat_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chat_ChatReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat_ChatReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // string chat_msg = 2;
  if (this->chat_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_msg().data(), static_cast<int>(this->_internal_chat_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Chat_ChatReply.chat_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat_ChatReply)
  return target;
}

size_t Chat_ChatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat_ChatReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chat_msg = 2;
  if (this->chat_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_msg());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chat_ChatReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat_ChatReply)
  GOOGLE_DCHECK_NE(&from, this);
  const Chat_ChatReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chat_ChatReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat_ChatReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat_ChatReply)
    MergeFrom(*source);
  }
}

void Chat_ChatReply::MergeFrom(const Chat_ChatReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat_ChatReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chat_msg().size() > 0) {

    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void Chat_ChatReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat_ChatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat_ChatReply::CopyFrom(const Chat_ChatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat_ChatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_ChatReply::IsInitialized() const {
  return true;
}

void Chat_ChatReply::InternalSwap(Chat_ChatReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chat_msg_.Swap(&other->chat_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat_ChatReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Chat_ChatReq* Arena::CreateMaybeMessage< ::Chat_ChatReq >(Arena* arena) {
  return Arena::CreateInternal< ::Chat_ChatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat_ChatReply* Arena::CreateMaybeMessage< ::Chat_ChatReply >(Arena* arena) {
  return Arena::CreateInternal< ::Chat_ChatReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
