// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PublicData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chat_2eproto;
class Chat_chat_twoReply;
class Chat_chat_twoReplyDefaultTypeInternal;
extern Chat_chat_twoReplyDefaultTypeInternal _Chat_chat_twoReply_default_instance_;
class Chat_chat_twoReq;
class Chat_chat_twoReqDefaultTypeInternal;
extern Chat_chat_twoReqDefaultTypeInternal _Chat_chat_twoReq_default_instance_;
class Chat_notify_chat_oneNotify;
class Chat_notify_chat_oneNotifyDefaultTypeInternal;
extern Chat_notify_chat_oneNotifyDefaultTypeInternal _Chat_notify_chat_oneNotify_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Chat_chat_twoReply* Arena::CreateMaybeMessage<::Chat_chat_twoReply>(Arena*);
template<> ::Chat_chat_twoReq* Arena::CreateMaybeMessage<::Chat_chat_twoReq>(Arena*);
template<> ::Chat_notify_chat_oneNotify* Arena::CreateMaybeMessage<::Chat_notify_chat_oneNotify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Chat_chat_twoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat_chat_twoReq) */ {
 public:
  Chat_chat_twoReq();
  virtual ~Chat_chat_twoReq();

  Chat_chat_twoReq(const Chat_chat_twoReq& from);
  Chat_chat_twoReq(Chat_chat_twoReq&& from) noexcept
    : Chat_chat_twoReq() {
    *this = ::std::move(from);
  }

  inline Chat_chat_twoReq& operator=(const Chat_chat_twoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_chat_twoReq& operator=(Chat_chat_twoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat_chat_twoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat_chat_twoReq* internal_default_instance() {
    return reinterpret_cast<const Chat_chat_twoReq*>(
               &_Chat_chat_twoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chat_chat_twoReq& a, Chat_chat_twoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_chat_twoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat_chat_twoReq* New() const final {
    return CreateMaybeMessage<Chat_chat_twoReq>(nullptr);
  }

  Chat_chat_twoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat_chat_twoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat_chat_twoReq& from);
  void MergeFrom(const Chat_chat_twoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_chat_twoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat_chat_twoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 1,
  };
  // string chat_msg = 1;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const char* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // @@protoc_insertion_point(class_scope:Chat_chat_twoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class Chat_chat_twoReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat_chat_twoReply) */ {
 public:
  Chat_chat_twoReply();
  virtual ~Chat_chat_twoReply();

  Chat_chat_twoReply(const Chat_chat_twoReply& from);
  Chat_chat_twoReply(Chat_chat_twoReply&& from) noexcept
    : Chat_chat_twoReply() {
    *this = ::std::move(from);
  }

  inline Chat_chat_twoReply& operator=(const Chat_chat_twoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_chat_twoReply& operator=(Chat_chat_twoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat_chat_twoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat_chat_twoReply* internal_default_instance() {
    return reinterpret_cast<const Chat_chat_twoReply*>(
               &_Chat_chat_twoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Chat_chat_twoReply& a, Chat_chat_twoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_chat_twoReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat_chat_twoReply* New() const final {
    return CreateMaybeMessage<Chat_chat_twoReply>(nullptr);
  }

  Chat_chat_twoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat_chat_twoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat_chat_twoReply& from);
  void MergeFrom(const Chat_chat_twoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_chat_twoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat_chat_twoReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 1,
  };
  // string chat_msg = 1;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const char* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // @@protoc_insertion_point(class_scope:Chat_chat_twoReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class Chat_notify_chat_oneNotify :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat_notify_chat_oneNotify) */ {
 public:
  Chat_notify_chat_oneNotify();
  virtual ~Chat_notify_chat_oneNotify();

  Chat_notify_chat_oneNotify(const Chat_notify_chat_oneNotify& from);
  Chat_notify_chat_oneNotify(Chat_notify_chat_oneNotify&& from) noexcept
    : Chat_notify_chat_oneNotify() {
    *this = ::std::move(from);
  }

  inline Chat_notify_chat_oneNotify& operator=(const Chat_notify_chat_oneNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_notify_chat_oneNotify& operator=(Chat_notify_chat_oneNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat_notify_chat_oneNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat_notify_chat_oneNotify* internal_default_instance() {
    return reinterpret_cast<const Chat_notify_chat_oneNotify*>(
               &_Chat_notify_chat_oneNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Chat_notify_chat_oneNotify& a, Chat_notify_chat_oneNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_notify_chat_oneNotify* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat_notify_chat_oneNotify* New() const final {
    return CreateMaybeMessage<Chat_notify_chat_oneNotify>(nullptr);
  }

  Chat_notify_chat_oneNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat_notify_chat_oneNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat_notify_chat_oneNotify& from);
  void MergeFrom(const Chat_notify_chat_oneNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_notify_chat_oneNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat_notify_chat_oneNotify";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 1,
    kChatMsg2FieldNumber = 2,
  };
  // string chat_msg = 1;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const char* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // string chat_msg2 = 2;
  void clear_chat_msg2();
  const std::string& chat_msg2() const;
  void set_chat_msg2(const std::string& value);
  void set_chat_msg2(std::string&& value);
  void set_chat_msg2(const char* value);
  void set_chat_msg2(const char* value, size_t size);
  std::string* mutable_chat_msg2();
  std::string* release_chat_msg2();
  void set_allocated_chat_msg2(std::string* chat_msg2);
  private:
  const std::string& _internal_chat_msg2() const;
  void _internal_set_chat_msg2(const std::string& value);
  std::string* _internal_mutable_chat_msg2();
  public:

  // @@protoc_insertion_point(class_scope:Chat_notify_chat_oneNotify)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chat_chat_twoReq

// string chat_msg = 1;
inline void Chat_chat_twoReq::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat_chat_twoReq::chat_msg() const {
  // @@protoc_insertion_point(field_get:Chat_chat_twoReq.chat_msg)
  return _internal_chat_msg();
}
inline void Chat_chat_twoReq::set_chat_msg(const std::string& value) {
  _internal_set_chat_msg(value);
  // @@protoc_insertion_point(field_set:Chat_chat_twoReq.chat_msg)
}
inline std::string* Chat_chat_twoReq::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:Chat_chat_twoReq.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& Chat_chat_twoReq::_internal_chat_msg() const {
  return chat_msg_.GetNoArena();
}
inline void Chat_chat_twoReq::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat_chat_twoReq::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat_chat_twoReq.chat_msg)
}
inline void Chat_chat_twoReq::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat_chat_twoReq.chat_msg)
}
inline void Chat_chat_twoReq::set_chat_msg(const char* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat_chat_twoReq.chat_msg)
}
inline std::string* Chat_chat_twoReq::_internal_mutable_chat_msg() {
  
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat_chat_twoReq::release_chat_msg() {
  // @@protoc_insertion_point(field_release:Chat_chat_twoReq.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat_chat_twoReq::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:Chat_chat_twoReq.chat_msg)
}

// -------------------------------------------------------------------

// Chat_chat_twoReply

// string chat_msg = 1;
inline void Chat_chat_twoReply::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat_chat_twoReply::chat_msg() const {
  // @@protoc_insertion_point(field_get:Chat_chat_twoReply.chat_msg)
  return _internal_chat_msg();
}
inline void Chat_chat_twoReply::set_chat_msg(const std::string& value) {
  _internal_set_chat_msg(value);
  // @@protoc_insertion_point(field_set:Chat_chat_twoReply.chat_msg)
}
inline std::string* Chat_chat_twoReply::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:Chat_chat_twoReply.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& Chat_chat_twoReply::_internal_chat_msg() const {
  return chat_msg_.GetNoArena();
}
inline void Chat_chat_twoReply::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat_chat_twoReply::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat_chat_twoReply.chat_msg)
}
inline void Chat_chat_twoReply::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat_chat_twoReply.chat_msg)
}
inline void Chat_chat_twoReply::set_chat_msg(const char* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat_chat_twoReply.chat_msg)
}
inline std::string* Chat_chat_twoReply::_internal_mutable_chat_msg() {
  
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat_chat_twoReply::release_chat_msg() {
  // @@protoc_insertion_point(field_release:Chat_chat_twoReply.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat_chat_twoReply::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:Chat_chat_twoReply.chat_msg)
}

// -------------------------------------------------------------------

// Chat_notify_chat_oneNotify

// string chat_msg = 1;
inline void Chat_notify_chat_oneNotify::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat_notify_chat_oneNotify::chat_msg() const {
  // @@protoc_insertion_point(field_get:Chat_notify_chat_oneNotify.chat_msg)
  return _internal_chat_msg();
}
inline void Chat_notify_chat_oneNotify::set_chat_msg(const std::string& value) {
  _internal_set_chat_msg(value);
  // @@protoc_insertion_point(field_set:Chat_notify_chat_oneNotify.chat_msg)
}
inline std::string* Chat_notify_chat_oneNotify::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:Chat_notify_chat_oneNotify.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& Chat_notify_chat_oneNotify::_internal_chat_msg() const {
  return chat_msg_.GetNoArena();
}
inline void Chat_notify_chat_oneNotify::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat_notify_chat_oneNotify::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat_notify_chat_oneNotify.chat_msg)
}
inline void Chat_notify_chat_oneNotify::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat_notify_chat_oneNotify.chat_msg)
}
inline void Chat_notify_chat_oneNotify::set_chat_msg(const char* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat_notify_chat_oneNotify.chat_msg)
}
inline std::string* Chat_notify_chat_oneNotify::_internal_mutable_chat_msg() {
  
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat_notify_chat_oneNotify::release_chat_msg() {
  // @@protoc_insertion_point(field_release:Chat_notify_chat_oneNotify.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat_notify_chat_oneNotify::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:Chat_notify_chat_oneNotify.chat_msg)
}

// string chat_msg2 = 2;
inline void Chat_notify_chat_oneNotify::clear_chat_msg2() {
  chat_msg2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat_notify_chat_oneNotify::chat_msg2() const {
  // @@protoc_insertion_point(field_get:Chat_notify_chat_oneNotify.chat_msg2)
  return _internal_chat_msg2();
}
inline void Chat_notify_chat_oneNotify::set_chat_msg2(const std::string& value) {
  _internal_set_chat_msg2(value);
  // @@protoc_insertion_point(field_set:Chat_notify_chat_oneNotify.chat_msg2)
}
inline std::string* Chat_notify_chat_oneNotify::mutable_chat_msg2() {
  // @@protoc_insertion_point(field_mutable:Chat_notify_chat_oneNotify.chat_msg2)
  return _internal_mutable_chat_msg2();
}
inline const std::string& Chat_notify_chat_oneNotify::_internal_chat_msg2() const {
  return chat_msg2_.GetNoArena();
}
inline void Chat_notify_chat_oneNotify::_internal_set_chat_msg2(const std::string& value) {
  
  chat_msg2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat_notify_chat_oneNotify::set_chat_msg2(std::string&& value) {
  
  chat_msg2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat_notify_chat_oneNotify.chat_msg2)
}
inline void Chat_notify_chat_oneNotify::set_chat_msg2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat_notify_chat_oneNotify.chat_msg2)
}
inline void Chat_notify_chat_oneNotify::set_chat_msg2(const char* value, size_t size) {
  
  chat_msg2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat_notify_chat_oneNotify.chat_msg2)
}
inline std::string* Chat_notify_chat_oneNotify::_internal_mutable_chat_msg2() {
  
  return chat_msg2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat_notify_chat_oneNotify::release_chat_msg2() {
  // @@protoc_insertion_point(field_release:Chat_notify_chat_oneNotify.chat_msg2)
  
  return chat_msg2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat_notify_chat_oneNotify::set_allocated_chat_msg2(std::string* chat_msg2) {
  if (chat_msg2 != nullptr) {
    
  } else {
    
  }
  chat_msg2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg2);
  // @@protoc_insertion_point(field_set_allocated:Chat_notify_chat_oneNotify.chat_msg2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
