// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class Login_LoginReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login_LoginReq> _instance;
} _Login_LoginReq_default_instance_;
class Login_LoginReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login_LoginReply> _instance;
} _Login_LoginReply_default_instance_;
class Login_CreateRoleReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login_CreateRoleReq> _instance;
} _Login_CreateRoleReq_default_instance_;
class Login_CreateRoleReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login_CreateRoleReply> _instance;
} _Login_CreateRoleReply_default_instance_;
class Login_SelectRoleReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login_SelectRoleReq> _instance;
} _Login_SelectRoleReq_default_instance_;
class Login_SelectRoleReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login_SelectRoleReply> _instance;
} _Login_SelectRoleReply_default_instance_;
class Login_DelRoleReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login_DelRoleReq> _instance;
} _Login_DelRoleReq_default_instance_;
class Login_DelRoleReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login_DelRoleReply> _instance;
} _Login_DelRoleReply_default_instance_;
static void InitDefaultsscc_info_Login_CreateRoleReply_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Login_CreateRoleReply_default_instance_;
    new (ptr) ::Login_CreateRoleReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Login_CreateRoleReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_CreateRoleReply_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_CreateRoleReply_Login_2eproto}, {}};

static void InitDefaultsscc_info_Login_CreateRoleReq_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Login_CreateRoleReq_default_instance_;
    new (ptr) ::Login_CreateRoleReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Login_CreateRoleReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_CreateRoleReq_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_CreateRoleReq_Login_2eproto}, {}};

static void InitDefaultsscc_info_Login_DelRoleReply_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Login_DelRoleReply_default_instance_;
    new (ptr) ::Login_DelRoleReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Login_DelRoleReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_DelRoleReply_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_DelRoleReply_Login_2eproto}, {}};

static void InitDefaultsscc_info_Login_DelRoleReq_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Login_DelRoleReq_default_instance_;
    new (ptr) ::Login_DelRoleReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Login_DelRoleReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_DelRoleReq_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_DelRoleReq_Login_2eproto}, {}};

static void InitDefaultsscc_info_Login_LoginReply_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Login_LoginReply_default_instance_;
    new (ptr) ::Login_LoginReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Login_LoginReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_LoginReply_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_LoginReply_Login_2eproto}, {}};

static void InitDefaultsscc_info_Login_LoginReq_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Login_LoginReq_default_instance_;
    new (ptr) ::Login_LoginReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Login_LoginReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_LoginReq_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_LoginReq_Login_2eproto}, {}};

static void InitDefaultsscc_info_Login_SelectRoleReply_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Login_SelectRoleReply_default_instance_;
    new (ptr) ::Login_SelectRoleReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Login_SelectRoleReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_SelectRoleReply_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_SelectRoleReply_Login_2eproto}, {}};

static void InitDefaultsscc_info_Login_SelectRoleReq_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Login_SelectRoleReq_default_instance_;
    new (ptr) ::Login_SelectRoleReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Login_SelectRoleReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_SelectRoleReq_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_SelectRoleReq_Login_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Login_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Login_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Login_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Login_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login_LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Login_LoginReq, login_name_),
  PROTOBUF_FIELD_OFFSET(::Login_LoginReq, login_pwd_),
  PROTOBUF_FIELD_OFFSET(::Login_LoginReq, game_id_),
  PROTOBUF_FIELD_OFFSET(::Login_LoginReq, open_id_),
  PROTOBUF_FIELD_OFFSET(::Login_LoginReq, token_),
  PROTOBUF_FIELD_OFFSET(::Login_LoginReq, channel_id_),
  PROTOBUF_FIELD_OFFSET(::Login_LoginReq, snid_),
  PROTOBUF_FIELD_OFFSET(::Login_LoginReq, mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login_LoginReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Login_LoginReply, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login_CreateRoleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Login_CreateRoleReq, role_id_),
  PROTOBUF_FIELD_OFFSET(::Login_CreateRoleReq, nick_name_),
  PROTOBUF_FIELD_OFFSET(::Login_CreateRoleReq, sex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login_CreateRoleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Login_CreateRoleReply, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login_SelectRoleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Login_SelectRoleReq, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login_SelectRoleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Login_SelectRoleReply, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login_DelRoleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Login_DelRoleReq, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login_DelRoleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Login_DelRoleReply, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Login_LoginReq)},
  { 13, -1, sizeof(::Login_LoginReply)},
  { 19, -1, sizeof(::Login_CreateRoleReq)},
  { 27, -1, sizeof(::Login_CreateRoleReply)},
  { 33, -1, sizeof(::Login_SelectRoleReq)},
  { 39, -1, sizeof(::Login_SelectRoleReply)},
  { 45, -1, sizeof(::Login_DelRoleReq)},
  { 51, -1, sizeof(::Login_DelRoleReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Login_LoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Login_LoginReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Login_CreateRoleReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Login_CreateRoleReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Login_SelectRoleReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Login_SelectRoleReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Login_DelRoleReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Login_DelRoleReply_default_instance_),
};

const char descriptor_table_protodef_Login_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Login.proto\032\014Common.proto\"\227\001\n\016Login_Lo"
  "ginReq\022\022\n\nlogin_name\030\001 \001(\014\022\021\n\tlogin_pwd\030"
  "\002 \001(\014\022\017\n\007game_id\030\003 \001(\014\022\017\n\007open_id\030\004 \001(\014\022"
  "\r\n\005token\030\005 \001(\014\022\022\n\nchannel_id\030\006 \001(\014\022\014\n\004sn"
  "id\030\007 \001(\014\022\013\n\003mac\030\010 \001(\014\"\037\n\020Login_LoginRepl"
  "y\022\013\n\003ret\030\001 \001(\005\"F\n\023Login_CreateRoleReq\022\017\n"
  "\007role_id\030\001 \001(\005\022\021\n\tnick_name\030\002 \001(\014\022\013\n\003sex"
  "\030\003 \001(\005\"$\n\025Login_CreateRoleReply\022\013\n\003ret\030\001"
  " \001(\005\"&\n\023Login_SelectRoleReq\022\017\n\007role_id\030\001"
  " \001(\005\"$\n\025Login_SelectRoleReply\022\013\n\003ret\030\001 \001"
  "(\005\"#\n\020Login_DelRoleReq\022\017\n\007role_id\030\001 \001(\005\""
  "!\n\022Login_DelRoleReply\022\013\n\003ret\030\001 \001(\005b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Login_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Login_2eproto_sccs[8] = {
  &scc_info_Login_CreateRoleReply_Login_2eproto.base,
  &scc_info_Login_CreateRoleReq_Login_2eproto.base,
  &scc_info_Login_DelRoleReply_Login_2eproto.base,
  &scc_info_Login_DelRoleReq_Login_2eproto.base,
  &scc_info_Login_LoginReply_Login_2eproto.base,
  &scc_info_Login_LoginReq_Login_2eproto.base,
  &scc_info_Login_SelectRoleReply_Login_2eproto.base,
  &scc_info_Login_SelectRoleReq_Login_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Login_2eproto_once;
static bool descriptor_table_Login_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_2eproto = {
  &descriptor_table_Login_2eproto_initialized, descriptor_table_protodef_Login_2eproto, "Login.proto", 482,
  &descriptor_table_Login_2eproto_once, descriptor_table_Login_2eproto_sccs, descriptor_table_Login_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_Login_2eproto::offsets,
  file_level_metadata_Login_2eproto, 8, file_level_enum_descriptors_Login_2eproto, file_level_service_descriptors_Login_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Login_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Login_2eproto)), true);

// ===================================================================

void Login_LoginReq::InitAsDefaultInstance() {
}
class Login_LoginReq::_Internal {
 public:
};

Login_LoginReq::Login_LoginReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login_LoginReq)
}
Login_LoginReq::Login_LoginReq(const Login_LoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login_name().empty()) {
    login_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_name_);
  }
  login_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login_pwd().empty()) {
    login_pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_pwd_);
  }
  game_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_id().empty()) {
    game_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.game_id_);
  }
  open_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_open_id().empty()) {
    open_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.open_id_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_id().empty()) {
    channel_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
  }
  snid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snid().empty()) {
    snid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snid_);
  }
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac().empty()) {
    mac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  // @@protoc_insertion_point(copy_constructor:Login_LoginReq)
}

void Login_LoginReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Login_LoginReq_Login_2eproto.base);
  login_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Login_LoginReq::~Login_LoginReq() {
  // @@protoc_insertion_point(destructor:Login_LoginReq)
  SharedDtor();
}

void Login_LoginReq::SharedDtor() {
  login_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Login_LoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login_LoginReq& Login_LoginReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_LoginReq_Login_2eproto.base);
  return *internal_default_instance();
}


void Login_LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Login_LoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Login_LoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes login_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes login_pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_login_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_game_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes open_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_open_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes snid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_snid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes mac = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login_LoginReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login_LoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login_name = 1;
  if (this->login_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login_name(), target);
  }

  // bytes login_pwd = 2;
  if (this->login_pwd().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_login_pwd(), target);
  }

  // bytes game_id = 3;
  if (this->game_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_game_id(), target);
  }

  // bytes open_id = 4;
  if (this->open_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_open_id(), target);
  }

  // bytes token = 5;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_token(), target);
  }

  // bytes channel_id = 6;
  if (this->channel_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_channel_id(), target);
  }

  // bytes snid = 7;
  if (this->snid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_snid(), target);
  }

  // bytes mac = 8;
  if (this->mac().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login_LoginReq)
  return target;
}

size_t Login_LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login_LoginReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login_name = 1;
  if (this->login_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login_name());
  }

  // bytes login_pwd = 2;
  if (this->login_pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login_pwd());
  }

  // bytes game_id = 3;
  if (this->game_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_game_id());
  }

  // bytes open_id = 4;
  if (this->open_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_open_id());
  }

  // bytes token = 5;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // bytes channel_id = 6;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_channel_id());
  }

  // bytes snid = 7;
  if (this->snid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_snid());
  }

  // bytes mac = 8;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login_LoginReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login_LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Login_LoginReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login_LoginReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login_LoginReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login_LoginReq)
    MergeFrom(*source);
  }
}

void Login_LoginReq::MergeFrom(const Login_LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login_LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login_name().size() > 0) {

    login_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_name_);
  }
  if (from.login_pwd().size() > 0) {

    login_pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.login_pwd_);
  }
  if (from.game_id().size() > 0) {

    game_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.game_id_);
  }
  if (from.open_id().size() > 0) {

    open_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.open_id_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.channel_id().size() > 0) {

    channel_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
  }
  if (from.snid().size() > 0) {

    snid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snid_);
  }
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
}

void Login_LoginReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login_LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_LoginReq::CopyFrom(const Login_LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login_LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_LoginReq::IsInitialized() const {
  return true;
}

void Login_LoginReq::InternalSwap(Login_LoginReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  login_name_.Swap(&other->login_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  login_pwd_.Swap(&other->login_pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_id_.Swap(&other->game_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  open_id_.Swap(&other->open_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  snid_.Swap(&other->snid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mac_.Swap(&other->mac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_LoginReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Login_LoginReply::InitAsDefaultInstance() {
}
class Login_LoginReply::_Internal {
 public:
};

Login_LoginReply::Login_LoginReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login_LoginReply)
}
Login_LoginReply::Login_LoginReply(const Login_LoginReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Login_LoginReply)
}

void Login_LoginReply::SharedCtor() {
  ret_ = 0;
}

Login_LoginReply::~Login_LoginReply() {
  // @@protoc_insertion_point(destructor:Login_LoginReply)
  SharedDtor();
}

void Login_LoginReply::SharedDtor() {
}

void Login_LoginReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login_LoginReply& Login_LoginReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_LoginReply_Login_2eproto.base);
  return *internal_default_instance();
}


void Login_LoginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Login_LoginReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* Login_LoginReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login_LoginReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login_LoginReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login_LoginReply)
  return target;
}

size_t Login_LoginReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login_LoginReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login_LoginReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login_LoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  const Login_LoginReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login_LoginReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login_LoginReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login_LoginReply)
    MergeFrom(*source);
  }
}

void Login_LoginReply::MergeFrom(const Login_LoginReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login_LoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void Login_LoginReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login_LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_LoginReply::CopyFrom(const Login_LoginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login_LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_LoginReply::IsInitialized() const {
  return true;
}

void Login_LoginReply::InternalSwap(Login_LoginReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_LoginReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Login_CreateRoleReq::InitAsDefaultInstance() {
}
class Login_CreateRoleReq::_Internal {
 public:
};

Login_CreateRoleReq::Login_CreateRoleReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login_CreateRoleReq)
}
Login_CreateRoleReq::Login_CreateRoleReq(const Login_CreateRoleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(sex_));
  // @@protoc_insertion_point(copy_constructor:Login_CreateRoleReq)
}

void Login_CreateRoleReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Login_CreateRoleReq_Login_2eproto.base);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(sex_));
}

Login_CreateRoleReq::~Login_CreateRoleReq() {
  // @@protoc_insertion_point(destructor:Login_CreateRoleReq)
  SharedDtor();
}

void Login_CreateRoleReq::SharedDtor() {
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Login_CreateRoleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login_CreateRoleReq& Login_CreateRoleReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_CreateRoleReq_Login_2eproto.base);
  return *internal_default_instance();
}


void Login_CreateRoleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Login_CreateRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(sex_));
  _internal_metadata_.Clear();
}

const char* Login_CreateRoleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login_CreateRoleReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login_CreateRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 role_id = 1;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_role_id(), target);
  }

  // bytes nick_name = 2;
  if (this->nick_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // int32 sex = 3;
  if (this->sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login_CreateRoleReq)
  return target;
}

size_t Login_CreateRoleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login_CreateRoleReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nick_name = 2;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nick_name());
  }

  // int32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_id());
  }

  // int32 sex = 3;
  if (this->sex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login_CreateRoleReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login_CreateRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Login_CreateRoleReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login_CreateRoleReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login_CreateRoleReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login_CreateRoleReq)
    MergeFrom(*source);
  }
}

void Login_CreateRoleReq::MergeFrom(const Login_CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login_CreateRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick_name().size() > 0) {

    nick_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
}

void Login_CreateRoleReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login_CreateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CreateRoleReq::CopyFrom(const Login_CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login_CreateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CreateRoleReq::IsInitialized() const {
  return true;
}

void Login_CreateRoleReq::InternalSwap(Login_CreateRoleReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_id_, other->role_id_);
  swap(sex_, other->sex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_CreateRoleReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Login_CreateRoleReply::InitAsDefaultInstance() {
}
class Login_CreateRoleReply::_Internal {
 public:
};

Login_CreateRoleReply::Login_CreateRoleReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login_CreateRoleReply)
}
Login_CreateRoleReply::Login_CreateRoleReply(const Login_CreateRoleReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Login_CreateRoleReply)
}

void Login_CreateRoleReply::SharedCtor() {
  ret_ = 0;
}

Login_CreateRoleReply::~Login_CreateRoleReply() {
  // @@protoc_insertion_point(destructor:Login_CreateRoleReply)
  SharedDtor();
}

void Login_CreateRoleReply::SharedDtor() {
}

void Login_CreateRoleReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login_CreateRoleReply& Login_CreateRoleReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_CreateRoleReply_Login_2eproto.base);
  return *internal_default_instance();
}


void Login_CreateRoleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Login_CreateRoleReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* Login_CreateRoleReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login_CreateRoleReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login_CreateRoleReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login_CreateRoleReply)
  return target;
}

size_t Login_CreateRoleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login_CreateRoleReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login_CreateRoleReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login_CreateRoleReply)
  GOOGLE_DCHECK_NE(&from, this);
  const Login_CreateRoleReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login_CreateRoleReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login_CreateRoleReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login_CreateRoleReply)
    MergeFrom(*source);
  }
}

void Login_CreateRoleReply::MergeFrom(const Login_CreateRoleReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login_CreateRoleReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void Login_CreateRoleReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login_CreateRoleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_CreateRoleReply::CopyFrom(const Login_CreateRoleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login_CreateRoleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_CreateRoleReply::IsInitialized() const {
  return true;
}

void Login_CreateRoleReply::InternalSwap(Login_CreateRoleReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_CreateRoleReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Login_SelectRoleReq::InitAsDefaultInstance() {
}
class Login_SelectRoleReq::_Internal {
 public:
};

Login_SelectRoleReq::Login_SelectRoleReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login_SelectRoleReq)
}
Login_SelectRoleReq::Login_SelectRoleReq(const Login_SelectRoleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:Login_SelectRoleReq)
}

void Login_SelectRoleReq::SharedCtor() {
  role_id_ = 0;
}

Login_SelectRoleReq::~Login_SelectRoleReq() {
  // @@protoc_insertion_point(destructor:Login_SelectRoleReq)
  SharedDtor();
}

void Login_SelectRoleReq::SharedDtor() {
}

void Login_SelectRoleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login_SelectRoleReq& Login_SelectRoleReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_SelectRoleReq_Login_2eproto.base);
  return *internal_default_instance();
}


void Login_SelectRoleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Login_SelectRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_ = 0;
  _internal_metadata_.Clear();
}

const char* Login_SelectRoleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login_SelectRoleReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login_SelectRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 role_id = 1;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login_SelectRoleReq)
  return target;
}

size_t Login_SelectRoleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login_SelectRoleReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login_SelectRoleReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login_SelectRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Login_SelectRoleReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login_SelectRoleReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login_SelectRoleReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login_SelectRoleReq)
    MergeFrom(*source);
  }
}

void Login_SelectRoleReq::MergeFrom(const Login_SelectRoleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login_SelectRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void Login_SelectRoleReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login_SelectRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_SelectRoleReq::CopyFrom(const Login_SelectRoleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login_SelectRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_SelectRoleReq::IsInitialized() const {
  return true;
}

void Login_SelectRoleReq::InternalSwap(Login_SelectRoleReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_SelectRoleReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Login_SelectRoleReply::InitAsDefaultInstance() {
}
class Login_SelectRoleReply::_Internal {
 public:
};

Login_SelectRoleReply::Login_SelectRoleReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login_SelectRoleReply)
}
Login_SelectRoleReply::Login_SelectRoleReply(const Login_SelectRoleReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Login_SelectRoleReply)
}

void Login_SelectRoleReply::SharedCtor() {
  ret_ = 0;
}

Login_SelectRoleReply::~Login_SelectRoleReply() {
  // @@protoc_insertion_point(destructor:Login_SelectRoleReply)
  SharedDtor();
}

void Login_SelectRoleReply::SharedDtor() {
}

void Login_SelectRoleReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login_SelectRoleReply& Login_SelectRoleReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_SelectRoleReply_Login_2eproto.base);
  return *internal_default_instance();
}


void Login_SelectRoleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Login_SelectRoleReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* Login_SelectRoleReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login_SelectRoleReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login_SelectRoleReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login_SelectRoleReply)
  return target;
}

size_t Login_SelectRoleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login_SelectRoleReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login_SelectRoleReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login_SelectRoleReply)
  GOOGLE_DCHECK_NE(&from, this);
  const Login_SelectRoleReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login_SelectRoleReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login_SelectRoleReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login_SelectRoleReply)
    MergeFrom(*source);
  }
}

void Login_SelectRoleReply::MergeFrom(const Login_SelectRoleReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login_SelectRoleReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void Login_SelectRoleReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login_SelectRoleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_SelectRoleReply::CopyFrom(const Login_SelectRoleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login_SelectRoleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_SelectRoleReply::IsInitialized() const {
  return true;
}

void Login_SelectRoleReply::InternalSwap(Login_SelectRoleReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_SelectRoleReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Login_DelRoleReq::InitAsDefaultInstance() {
}
class Login_DelRoleReq::_Internal {
 public:
};

Login_DelRoleReq::Login_DelRoleReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login_DelRoleReq)
}
Login_DelRoleReq::Login_DelRoleReq(const Login_DelRoleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:Login_DelRoleReq)
}

void Login_DelRoleReq::SharedCtor() {
  role_id_ = 0;
}

Login_DelRoleReq::~Login_DelRoleReq() {
  // @@protoc_insertion_point(destructor:Login_DelRoleReq)
  SharedDtor();
}

void Login_DelRoleReq::SharedDtor() {
}

void Login_DelRoleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login_DelRoleReq& Login_DelRoleReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_DelRoleReq_Login_2eproto.base);
  return *internal_default_instance();
}


void Login_DelRoleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Login_DelRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_ = 0;
  _internal_metadata_.Clear();
}

const char* Login_DelRoleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login_DelRoleReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login_DelRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 role_id = 1;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login_DelRoleReq)
  return target;
}

size_t Login_DelRoleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login_DelRoleReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login_DelRoleReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login_DelRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Login_DelRoleReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login_DelRoleReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login_DelRoleReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login_DelRoleReq)
    MergeFrom(*source);
  }
}

void Login_DelRoleReq::MergeFrom(const Login_DelRoleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login_DelRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void Login_DelRoleReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login_DelRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_DelRoleReq::CopyFrom(const Login_DelRoleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login_DelRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_DelRoleReq::IsInitialized() const {
  return true;
}

void Login_DelRoleReq::InternalSwap(Login_DelRoleReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_DelRoleReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Login_DelRoleReply::InitAsDefaultInstance() {
}
class Login_DelRoleReply::_Internal {
 public:
};

Login_DelRoleReply::Login_DelRoleReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login_DelRoleReply)
}
Login_DelRoleReply::Login_DelRoleReply(const Login_DelRoleReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Login_DelRoleReply)
}

void Login_DelRoleReply::SharedCtor() {
  ret_ = 0;
}

Login_DelRoleReply::~Login_DelRoleReply() {
  // @@protoc_insertion_point(destructor:Login_DelRoleReply)
  SharedDtor();
}

void Login_DelRoleReply::SharedDtor() {
}

void Login_DelRoleReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login_DelRoleReply& Login_DelRoleReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_DelRoleReply_Login_2eproto.base);
  return *internal_default_instance();
}


void Login_DelRoleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Login_DelRoleReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* Login_DelRoleReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login_DelRoleReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login_DelRoleReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login_DelRoleReply)
  return target;
}

size_t Login_DelRoleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login_DelRoleReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login_DelRoleReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login_DelRoleReply)
  GOOGLE_DCHECK_NE(&from, this);
  const Login_DelRoleReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login_DelRoleReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login_DelRoleReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login_DelRoleReply)
    MergeFrom(*source);
  }
}

void Login_DelRoleReply::MergeFrom(const Login_DelRoleReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login_DelRoleReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void Login_DelRoleReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login_DelRoleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_DelRoleReply::CopyFrom(const Login_DelRoleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login_DelRoleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_DelRoleReply::IsInitialized() const {
  return true;
}

void Login_DelRoleReply::InternalSwap(Login_DelRoleReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_DelRoleReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Login_LoginReq* Arena::CreateMaybeMessage< ::Login_LoginReq >(Arena* arena) {
  return Arena::CreateInternal< ::Login_LoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Login_LoginReply* Arena::CreateMaybeMessage< ::Login_LoginReply >(Arena* arena) {
  return Arena::CreateInternal< ::Login_LoginReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Login_CreateRoleReq* Arena::CreateMaybeMessage< ::Login_CreateRoleReq >(Arena* arena) {
  return Arena::CreateInternal< ::Login_CreateRoleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Login_CreateRoleReply* Arena::CreateMaybeMessage< ::Login_CreateRoleReply >(Arena* arena) {
  return Arena::CreateInternal< ::Login_CreateRoleReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Login_SelectRoleReq* Arena::CreateMaybeMessage< ::Login_SelectRoleReq >(Arena* arena) {
  return Arena::CreateInternal< ::Login_SelectRoleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Login_SelectRoleReply* Arena::CreateMaybeMessage< ::Login_SelectRoleReply >(Arena* arena) {
  return Arena::CreateInternal< ::Login_SelectRoleReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Login_DelRoleReq* Arena::CreateMaybeMessage< ::Login_DelRoleReq >(Arena* arena) {
  return Arena::CreateInternal< ::Login_DelRoleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Login_DelRoleReply* Arena::CreateMaybeMessage< ::Login_DelRoleReply >(Arena* arena) {
  return Arena::CreateInternal< ::Login_DelRoleReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
