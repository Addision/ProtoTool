// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameDB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameDB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameDB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameDB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameDB_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameDB_2eproto;
class ActivityDB;
class ActivityDBDefaultTypeInternal;
extern ActivityDBDefaultTypeInternal _ActivityDB_default_instance_;
class BuffDB;
class BuffDBDefaultTypeInternal;
extern BuffDBDefaultTypeInternal _BuffDB_default_instance_;
class EquipDB;
class EquipDBDefaultTypeInternal;
extern EquipDBDefaultTypeInternal _EquipDB_default_instance_;
class ItemDB;
class ItemDBDefaultTypeInternal;
extern ItemDBDefaultTypeInternal _ItemDB_default_instance_;
class PetDB;
class PetDBDefaultTypeInternal;
extern PetDBDefaultTypeInternal _PetDB_default_instance_;
class ResourceDB;
class ResourceDBDefaultTypeInternal;
extern ResourceDBDefaultTypeInternal _ResourceDB_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class SkillDB;
class SkillDBDefaultTypeInternal;
extern SkillDBDefaultTypeInternal _SkillDB_default_instance_;
class TasksDB;
class TasksDBDefaultTypeInternal;
extern TasksDBDefaultTypeInternal _TasksDB_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ActivityDB* Arena::CreateMaybeMessage<::ActivityDB>(Arena*);
template<> ::BuffDB* Arena::CreateMaybeMessage<::BuffDB>(Arena*);
template<> ::EquipDB* Arena::CreateMaybeMessage<::EquipDB>(Arena*);
template<> ::ItemDB* Arena::CreateMaybeMessage<::ItemDB>(Arena*);
template<> ::PetDB* Arena::CreateMaybeMessage<::PetDB>(Arena*);
template<> ::ResourceDB* Arena::CreateMaybeMessage<::ResourceDB>(Arena*);
template<> ::Role* Arena::CreateMaybeMessage<::Role>(Arena*);
template<> ::SkillDB* Arena::CreateMaybeMessage<::SkillDB>(Arena*);
template<> ::TasksDB* Arena::CreateMaybeMessage<::TasksDB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ActivityDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActivityDB) */ {
 public:
  ActivityDB();
  virtual ~ActivityDB();

  ActivityDB(const ActivityDB& from);
  ActivityDB(ActivityDB&& from) noexcept
    : ActivityDB() {
    *this = ::std::move(from);
  }

  inline ActivityDB& operator=(const ActivityDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityDB& operator=(ActivityDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivityDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityDB* internal_default_instance() {
    return reinterpret_cast<const ActivityDB*>(
               &_ActivityDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActivityDB& a, ActivityDB& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityDB* New() const final {
    return CreateMaybeMessage<ActivityDB>(nullptr);
  }

  ActivityDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivityDB& from);
  void MergeFrom(const ActivityDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActivityDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameDB_2eproto);
    return ::descriptor_table_GameDB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ActivityDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameDB_2eproto;
};
// -------------------------------------------------------------------

class PetDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PetDB) */ {
 public:
  PetDB();
  virtual ~PetDB();

  PetDB(const PetDB& from);
  PetDB(PetDB&& from) noexcept
    : PetDB() {
    *this = ::std::move(from);
  }

  inline PetDB& operator=(const PetDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline PetDB& operator=(PetDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PetDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PetDB* internal_default_instance() {
    return reinterpret_cast<const PetDB*>(
               &_PetDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PetDB& a, PetDB& b) {
    a.Swap(&b);
  }
  inline void Swap(PetDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PetDB* New() const final {
    return CreateMaybeMessage<PetDB>(nullptr);
  }

  PetDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PetDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PetDB& from);
  void MergeFrom(const PetDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PetDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PetDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameDB_2eproto);
    return ::descriptor_table_GameDB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PetDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameDB_2eproto;
};
// -------------------------------------------------------------------

class TasksDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TasksDB) */ {
 public:
  TasksDB();
  virtual ~TasksDB();

  TasksDB(const TasksDB& from);
  TasksDB(TasksDB&& from) noexcept
    : TasksDB() {
    *this = ::std::move(from);
  }

  inline TasksDB& operator=(const TasksDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TasksDB& operator=(TasksDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TasksDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TasksDB* internal_default_instance() {
    return reinterpret_cast<const TasksDB*>(
               &_TasksDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TasksDB& a, TasksDB& b) {
    a.Swap(&b);
  }
  inline void Swap(TasksDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TasksDB* New() const final {
    return CreateMaybeMessage<TasksDB>(nullptr);
  }

  TasksDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TasksDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TasksDB& from);
  void MergeFrom(const TasksDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TasksDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TasksDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameDB_2eproto);
    return ::descriptor_table_GameDB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TasksDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameDB_2eproto;
};
// -------------------------------------------------------------------

class SkillDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SkillDB) */ {
 public:
  SkillDB();
  virtual ~SkillDB();

  SkillDB(const SkillDB& from);
  SkillDB(SkillDB&& from) noexcept
    : SkillDB() {
    *this = ::std::move(from);
  }

  inline SkillDB& operator=(const SkillDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillDB& operator=(SkillDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkillDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillDB* internal_default_instance() {
    return reinterpret_cast<const SkillDB*>(
               &_SkillDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SkillDB& a, SkillDB& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SkillDB* New() const final {
    return CreateMaybeMessage<SkillDB>(nullptr);
  }

  SkillDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkillDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkillDB& from);
  void MergeFrom(const SkillDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SkillDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameDB_2eproto);
    return ::descriptor_table_GameDB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SkillDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameDB_2eproto;
};
// -------------------------------------------------------------------

class BuffDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuffDB) */ {
 public:
  BuffDB();
  virtual ~BuffDB();

  BuffDB(const BuffDB& from);
  BuffDB(BuffDB&& from) noexcept
    : BuffDB() {
    *this = ::std::move(from);
  }

  inline BuffDB& operator=(const BuffDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuffDB& operator=(BuffDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuffDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuffDB* internal_default_instance() {
    return reinterpret_cast<const BuffDB*>(
               &_BuffDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BuffDB& a, BuffDB& b) {
    a.Swap(&b);
  }
  inline void Swap(BuffDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuffDB* New() const final {
    return CreateMaybeMessage<BuffDB>(nullptr);
  }

  BuffDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuffDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuffDB& from);
  void MergeFrom(const BuffDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuffDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuffDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameDB_2eproto);
    return ::descriptor_table_GameDB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BuffDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameDB_2eproto;
};
// -------------------------------------------------------------------

class ResourceDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResourceDB) */ {
 public:
  ResourceDB();
  virtual ~ResourceDB();

  ResourceDB(const ResourceDB& from);
  ResourceDB(ResourceDB&& from) noexcept
    : ResourceDB() {
    *this = ::std::move(from);
  }

  inline ResourceDB& operator=(const ResourceDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceDB& operator=(ResourceDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceDB* internal_default_instance() {
    return reinterpret_cast<const ResourceDB*>(
               &_ResourceDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResourceDB& a, ResourceDB& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceDB* New() const final {
    return CreateMaybeMessage<ResourceDB>(nullptr);
  }

  ResourceDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceDB& from);
  void MergeFrom(const ResourceDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResourceDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameDB_2eproto);
    return ::descriptor_table_GameDB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ResourceDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameDB_2eproto;
};
// -------------------------------------------------------------------

class ItemDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ItemDB) */ {
 public:
  ItemDB();
  virtual ~ItemDB();

  ItemDB(const ItemDB& from);
  ItemDB(ItemDB&& from) noexcept
    : ItemDB() {
    *this = ::std::move(from);
  }

  inline ItemDB& operator=(const ItemDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemDB& operator=(ItemDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemDB* internal_default_instance() {
    return reinterpret_cast<const ItemDB*>(
               &_ItemDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ItemDB& a, ItemDB& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemDB* New() const final {
    return CreateMaybeMessage<ItemDB>(nullptr);
  }

  ItemDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemDB& from);
  void MergeFrom(const ItemDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ItemDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameDB_2eproto);
    return ::descriptor_table_GameDB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ItemDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameDB_2eproto;
};
// -------------------------------------------------------------------

class EquipDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EquipDB) */ {
 public:
  EquipDB();
  virtual ~EquipDB();

  EquipDB(const EquipDB& from);
  EquipDB(EquipDB&& from) noexcept
    : EquipDB() {
    *this = ::std::move(from);
  }

  inline EquipDB& operator=(const EquipDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipDB& operator=(EquipDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EquipDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EquipDB* internal_default_instance() {
    return reinterpret_cast<const EquipDB*>(
               &_EquipDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EquipDB& a, EquipDB& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EquipDB* New() const final {
    return CreateMaybeMessage<EquipDB>(nullptr);
  }

  EquipDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EquipDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EquipDB& from);
  void MergeFrom(const EquipDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EquipDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameDB_2eproto);
    return ::descriptor_table_GameDB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EquipDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameDB_2eproto;
};
// -------------------------------------------------------------------

class Role :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(nullptr);
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Role";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameDB_2eproto);
    return ::descriptor_table_GameDB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kRoleNameFieldNumber = 3,
    kActivityDbFieldNumber = 80,
    kPetDbFieldNumber = 81,
    kTasksDbFieldNumber = 82,
    kSkillDbFieldNumber = 83,
    kBuffDbFieldNumber = 84,
    kResourceDbFieldNumber = 85,
    kHisResourceDbFieldNumber = 86,
    kItemDbFieldNumber = 87,
    kEquipDbFieldNumber = 88,
    kRoleIdFieldNumber = 1,
    kRoleSexFieldNumber = 4,
    kRoleIsvalidFieldNumber = 5,
    kTmLoginFieldNumber = 6,
    kTmLogoutFieldNumber = 7,
    kSceneIdFieldNumber = 8,
    kPosXFieldNumber = 9,
    kPosZFieldNumber = 10,
    kLastSceneIdFieldNumber = 11,
    kLastPosXFieldNumber = 12,
    kLastPosZFieldNumber = 13,
    kRoleHpFieldNumber = 51,
    kRoleMpFieldNumber = 52,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  void set_role_name(const std::string& value);
  void set_role_name(std::string&& value);
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  std::string* mutable_role_name();
  std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .ActivityDB activity_db = 80;
  bool has_activity_db() const;
  private:
  bool _internal_has_activity_db() const;
  public:
  void clear_activity_db();
  const ::ActivityDB& activity_db() const;
  ::ActivityDB* release_activity_db();
  ::ActivityDB* mutable_activity_db();
  void set_allocated_activity_db(::ActivityDB* activity_db);
  private:
  const ::ActivityDB& _internal_activity_db() const;
  ::ActivityDB* _internal_mutable_activity_db();
  public:

  // .PetDB pet_db = 81;
  bool has_pet_db() const;
  private:
  bool _internal_has_pet_db() const;
  public:
  void clear_pet_db();
  const ::PetDB& pet_db() const;
  ::PetDB* release_pet_db();
  ::PetDB* mutable_pet_db();
  void set_allocated_pet_db(::PetDB* pet_db);
  private:
  const ::PetDB& _internal_pet_db() const;
  ::PetDB* _internal_mutable_pet_db();
  public:

  // .TasksDB tasks_db = 82;
  bool has_tasks_db() const;
  private:
  bool _internal_has_tasks_db() const;
  public:
  void clear_tasks_db();
  const ::TasksDB& tasks_db() const;
  ::TasksDB* release_tasks_db();
  ::TasksDB* mutable_tasks_db();
  void set_allocated_tasks_db(::TasksDB* tasks_db);
  private:
  const ::TasksDB& _internal_tasks_db() const;
  ::TasksDB* _internal_mutable_tasks_db();
  public:

  // .SkillDB skill_db = 83;
  bool has_skill_db() const;
  private:
  bool _internal_has_skill_db() const;
  public:
  void clear_skill_db();
  const ::SkillDB& skill_db() const;
  ::SkillDB* release_skill_db();
  ::SkillDB* mutable_skill_db();
  void set_allocated_skill_db(::SkillDB* skill_db);
  private:
  const ::SkillDB& _internal_skill_db() const;
  ::SkillDB* _internal_mutable_skill_db();
  public:

  // .BuffDB buff_db = 84;
  bool has_buff_db() const;
  private:
  bool _internal_has_buff_db() const;
  public:
  void clear_buff_db();
  const ::BuffDB& buff_db() const;
  ::BuffDB* release_buff_db();
  ::BuffDB* mutable_buff_db();
  void set_allocated_buff_db(::BuffDB* buff_db);
  private:
  const ::BuffDB& _internal_buff_db() const;
  ::BuffDB* _internal_mutable_buff_db();
  public:

  // .ResourceDB resource_db = 85;
  bool has_resource_db() const;
  private:
  bool _internal_has_resource_db() const;
  public:
  void clear_resource_db();
  const ::ResourceDB& resource_db() const;
  ::ResourceDB* release_resource_db();
  ::ResourceDB* mutable_resource_db();
  void set_allocated_resource_db(::ResourceDB* resource_db);
  private:
  const ::ResourceDB& _internal_resource_db() const;
  ::ResourceDB* _internal_mutable_resource_db();
  public:

  // .ResourceDB his_resource_db = 86;
  bool has_his_resource_db() const;
  private:
  bool _internal_has_his_resource_db() const;
  public:
  void clear_his_resource_db();
  const ::ResourceDB& his_resource_db() const;
  ::ResourceDB* release_his_resource_db();
  ::ResourceDB* mutable_his_resource_db();
  void set_allocated_his_resource_db(::ResourceDB* his_resource_db);
  private:
  const ::ResourceDB& _internal_his_resource_db() const;
  ::ResourceDB* _internal_mutable_his_resource_db();
  public:

  // .ItemDB item_db = 87;
  bool has_item_db() const;
  private:
  bool _internal_has_item_db() const;
  public:
  void clear_item_db();
  const ::ItemDB& item_db() const;
  ::ItemDB* release_item_db();
  ::ItemDB* mutable_item_db();
  void set_allocated_item_db(::ItemDB* item_db);
  private:
  const ::ItemDB& _internal_item_db() const;
  ::ItemDB* _internal_mutable_item_db();
  public:

  // .EquipDB equip_db = 88;
  bool has_equip_db() const;
  private:
  bool _internal_has_equip_db() const;
  public:
  void clear_equip_db();
  const ::EquipDB& equip_db() const;
  ::EquipDB* release_equip_db();
  ::EquipDB* mutable_equip_db();
  void set_allocated_equip_db(::EquipDB* equip_db);
  private:
  const ::EquipDB& _internal_equip_db() const;
  ::EquipDB* _internal_mutable_equip_db();
  public:

  // uint64 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 role_sex = 4;
  void clear_role_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 role_sex() const;
  void set_role_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_sex() const;
  void _internal_set_role_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 role_isvalid = 5;
  void clear_role_isvalid();
  ::PROTOBUF_NAMESPACE_ID::int32 role_isvalid() const;
  void set_role_isvalid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_isvalid() const;
  void _internal_set_role_isvalid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 tm_login = 6;
  void clear_tm_login();
  ::PROTOBUF_NAMESPACE_ID::int64 tm_login() const;
  void set_tm_login(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tm_login() const;
  void _internal_set_tm_login(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tm_logout = 7;
  void clear_tm_logout();
  ::PROTOBUF_NAMESPACE_ID::int64 tm_logout() const;
  void set_tm_logout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tm_logout() const;
  void _internal_set_tm_logout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float scene_id = 8;
  void clear_scene_id();
  float scene_id() const;
  void set_scene_id(float value);
  private:
  float _internal_scene_id() const;
  void _internal_set_scene_id(float value);
  public:

  // float pos_x = 9;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_z = 10;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // float last_scene_id = 11;
  void clear_last_scene_id();
  float last_scene_id() const;
  void set_last_scene_id(float value);
  private:
  float _internal_last_scene_id() const;
  void _internal_set_last_scene_id(float value);
  public:

  // float last_pos_x = 12;
  void clear_last_pos_x();
  float last_pos_x() const;
  void set_last_pos_x(float value);
  private:
  float _internal_last_pos_x() const;
  void _internal_set_last_pos_x(float value);
  public:

  // float last_pos_z = 13;
  void clear_last_pos_z();
  float last_pos_z() const;
  void set_last_pos_z(float value);
  private:
  float _internal_last_pos_z() const;
  void _internal_set_last_pos_z(float value);
  public:

  // int32 role_hp = 51;
  void clear_role_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 role_hp() const;
  void set_role_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_hp() const;
  void _internal_set_role_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 role_mp = 52;
  void clear_role_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 role_mp() const;
  void set_role_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_mp() const;
  void _internal_set_role_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Role)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::ActivityDB* activity_db_;
  ::PetDB* pet_db_;
  ::TasksDB* tasks_db_;
  ::SkillDB* skill_db_;
  ::BuffDB* buff_db_;
  ::ResourceDB* resource_db_;
  ::ResourceDB* his_resource_db_;
  ::ItemDB* item_db_;
  ::EquipDB* equip_db_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_isvalid_;
  ::PROTOBUF_NAMESPACE_ID::int64 tm_login_;
  ::PROTOBUF_NAMESPACE_ID::int64 tm_logout_;
  float scene_id_;
  float pos_x_;
  float pos_z_;
  float last_scene_id_;
  float last_pos_x_;
  float last_pos_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_mp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameDB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActivityDB

// -------------------------------------------------------------------

// PetDB

// -------------------------------------------------------------------

// TasksDB

// -------------------------------------------------------------------

// SkillDB

// -------------------------------------------------------------------

// BuffDB

// -------------------------------------------------------------------

// ResourceDB

// -------------------------------------------------------------------

// ItemDB

// -------------------------------------------------------------------

// EquipDB

// -------------------------------------------------------------------

// Role

// uint64 role_id = 1;
inline void Role::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Role::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Role::role_id() const {
  // @@protoc_insertion_point(field_get:Role.role_id)
  return _internal_role_id();
}
inline void Role::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void Role::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Role.role_id)
}

// string account = 2;
inline void Role::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::account() const {
  // @@protoc_insertion_point(field_get:Role.account)
  return _internal_account();
}
inline void Role::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:Role.account)
}
inline std::string* Role::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Role.account)
  return _internal_mutable_account();
}
inline const std::string& Role::_internal_account() const {
  return account_.GetNoArena();
}
inline void Role::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Role.account)
}
inline void Role::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Role.account)
}
inline void Role::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Role.account)
}
inline std::string* Role::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_account() {
  // @@protoc_insertion_point(field_release:Role.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Role.account)
}

// string role_name = 3;
inline void Role::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::role_name() const {
  // @@protoc_insertion_point(field_get:Role.role_name)
  return _internal_role_name();
}
inline void Role::set_role_name(const std::string& value) {
  _internal_set_role_name(value);
  // @@protoc_insertion_point(field_set:Role.role_name)
}
inline std::string* Role::mutable_role_name() {
  // @@protoc_insertion_point(field_mutable:Role.role_name)
  return _internal_mutable_role_name();
}
inline const std::string& Role::_internal_role_name() const {
  return role_name_.GetNoArena();
}
inline void Role::_internal_set_role_name(const std::string& value) {
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_role_name(std::string&& value) {
  
  role_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Role.role_name)
}
inline void Role::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Role.role_name)
}
inline void Role::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Role.role_name)
}
inline std::string* Role::_internal_mutable_role_name() {
  
  return role_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_role_name() {
  // @@protoc_insertion_point(field_release:Role.role_name)
  
  return role_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:Role.role_name)
}

// int32 role_sex = 4;
inline void Role::clear_role_sex() {
  role_sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_role_sex() const {
  return role_sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::role_sex() const {
  // @@protoc_insertion_point(field_get:Role.role_sex)
  return _internal_role_sex();
}
inline void Role::_internal_set_role_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_sex_ = value;
}
inline void Role::set_role_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_sex(value);
  // @@protoc_insertion_point(field_set:Role.role_sex)
}

// int32 role_isvalid = 5;
inline void Role::clear_role_isvalid() {
  role_isvalid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_role_isvalid() const {
  return role_isvalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::role_isvalid() const {
  // @@protoc_insertion_point(field_get:Role.role_isvalid)
  return _internal_role_isvalid();
}
inline void Role::_internal_set_role_isvalid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_isvalid_ = value;
}
inline void Role::set_role_isvalid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_isvalid(value);
  // @@protoc_insertion_point(field_set:Role.role_isvalid)
}

// int64 tm_login = 6;
inline void Role::clear_tm_login() {
  tm_login_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Role::_internal_tm_login() const {
  return tm_login_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Role::tm_login() const {
  // @@protoc_insertion_point(field_get:Role.tm_login)
  return _internal_tm_login();
}
inline void Role::_internal_set_tm_login(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tm_login_ = value;
}
inline void Role::set_tm_login(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tm_login(value);
  // @@protoc_insertion_point(field_set:Role.tm_login)
}

// int64 tm_logout = 7;
inline void Role::clear_tm_logout() {
  tm_logout_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Role::_internal_tm_logout() const {
  return tm_logout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Role::tm_logout() const {
  // @@protoc_insertion_point(field_get:Role.tm_logout)
  return _internal_tm_logout();
}
inline void Role::_internal_set_tm_logout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tm_logout_ = value;
}
inline void Role::set_tm_logout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tm_logout(value);
  // @@protoc_insertion_point(field_set:Role.tm_logout)
}

// float scene_id = 8;
inline void Role::clear_scene_id() {
  scene_id_ = 0;
}
inline float Role::_internal_scene_id() const {
  return scene_id_;
}
inline float Role::scene_id() const {
  // @@protoc_insertion_point(field_get:Role.scene_id)
  return _internal_scene_id();
}
inline void Role::_internal_set_scene_id(float value) {
  
  scene_id_ = value;
}
inline void Role::set_scene_id(float value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:Role.scene_id)
}

// float pos_x = 9;
inline void Role::clear_pos_x() {
  pos_x_ = 0;
}
inline float Role::_internal_pos_x() const {
  return pos_x_;
}
inline float Role::pos_x() const {
  // @@protoc_insertion_point(field_get:Role.pos_x)
  return _internal_pos_x();
}
inline void Role::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void Role::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:Role.pos_x)
}

// float pos_z = 10;
inline void Role::clear_pos_z() {
  pos_z_ = 0;
}
inline float Role::_internal_pos_z() const {
  return pos_z_;
}
inline float Role::pos_z() const {
  // @@protoc_insertion_point(field_get:Role.pos_z)
  return _internal_pos_z();
}
inline void Role::_internal_set_pos_z(float value) {
  
  pos_z_ = value;
}
inline void Role::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:Role.pos_z)
}

// float last_scene_id = 11;
inline void Role::clear_last_scene_id() {
  last_scene_id_ = 0;
}
inline float Role::_internal_last_scene_id() const {
  return last_scene_id_;
}
inline float Role::last_scene_id() const {
  // @@protoc_insertion_point(field_get:Role.last_scene_id)
  return _internal_last_scene_id();
}
inline void Role::_internal_set_last_scene_id(float value) {
  
  last_scene_id_ = value;
}
inline void Role::set_last_scene_id(float value) {
  _internal_set_last_scene_id(value);
  // @@protoc_insertion_point(field_set:Role.last_scene_id)
}

// float last_pos_x = 12;
inline void Role::clear_last_pos_x() {
  last_pos_x_ = 0;
}
inline float Role::_internal_last_pos_x() const {
  return last_pos_x_;
}
inline float Role::last_pos_x() const {
  // @@protoc_insertion_point(field_get:Role.last_pos_x)
  return _internal_last_pos_x();
}
inline void Role::_internal_set_last_pos_x(float value) {
  
  last_pos_x_ = value;
}
inline void Role::set_last_pos_x(float value) {
  _internal_set_last_pos_x(value);
  // @@protoc_insertion_point(field_set:Role.last_pos_x)
}

// float last_pos_z = 13;
inline void Role::clear_last_pos_z() {
  last_pos_z_ = 0;
}
inline float Role::_internal_last_pos_z() const {
  return last_pos_z_;
}
inline float Role::last_pos_z() const {
  // @@protoc_insertion_point(field_get:Role.last_pos_z)
  return _internal_last_pos_z();
}
inline void Role::_internal_set_last_pos_z(float value) {
  
  last_pos_z_ = value;
}
inline void Role::set_last_pos_z(float value) {
  _internal_set_last_pos_z(value);
  // @@protoc_insertion_point(field_set:Role.last_pos_z)
}

// int32 role_hp = 51;
inline void Role::clear_role_hp() {
  role_hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_role_hp() const {
  return role_hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::role_hp() const {
  // @@protoc_insertion_point(field_get:Role.role_hp)
  return _internal_role_hp();
}
inline void Role::_internal_set_role_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_hp_ = value;
}
inline void Role::set_role_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_hp(value);
  // @@protoc_insertion_point(field_set:Role.role_hp)
}

// int32 role_mp = 52;
inline void Role::clear_role_mp() {
  role_mp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_role_mp() const {
  return role_mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::role_mp() const {
  // @@protoc_insertion_point(field_get:Role.role_mp)
  return _internal_role_mp();
}
inline void Role::_internal_set_role_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_mp_ = value;
}
inline void Role::set_role_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_mp(value);
  // @@protoc_insertion_point(field_set:Role.role_mp)
}

// .ActivityDB activity_db = 80;
inline bool Role::_internal_has_activity_db() const {
  return this != internal_default_instance() && activity_db_ != nullptr;
}
inline bool Role::has_activity_db() const {
  return _internal_has_activity_db();
}
inline void Role::clear_activity_db() {
  if (GetArenaNoVirtual() == nullptr && activity_db_ != nullptr) {
    delete activity_db_;
  }
  activity_db_ = nullptr;
}
inline const ::ActivityDB& Role::_internal_activity_db() const {
  const ::ActivityDB* p = activity_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivityDB*>(
      &::_ActivityDB_default_instance_);
}
inline const ::ActivityDB& Role::activity_db() const {
  // @@protoc_insertion_point(field_get:Role.activity_db)
  return _internal_activity_db();
}
inline ::ActivityDB* Role::release_activity_db() {
  // @@protoc_insertion_point(field_release:Role.activity_db)
  
  ::ActivityDB* temp = activity_db_;
  activity_db_ = nullptr;
  return temp;
}
inline ::ActivityDB* Role::_internal_mutable_activity_db() {
  
  if (activity_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivityDB>(GetArenaNoVirtual());
    activity_db_ = p;
  }
  return activity_db_;
}
inline ::ActivityDB* Role::mutable_activity_db() {
  // @@protoc_insertion_point(field_mutable:Role.activity_db)
  return _internal_mutable_activity_db();
}
inline void Role::set_allocated_activity_db(::ActivityDB* activity_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activity_db_;
  }
  if (activity_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activity_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity_db, submessage_arena);
    }
    
  } else {
    
  }
  activity_db_ = activity_db;
  // @@protoc_insertion_point(field_set_allocated:Role.activity_db)
}

// .PetDB pet_db = 81;
inline bool Role::_internal_has_pet_db() const {
  return this != internal_default_instance() && pet_db_ != nullptr;
}
inline bool Role::has_pet_db() const {
  return _internal_has_pet_db();
}
inline void Role::clear_pet_db() {
  if (GetArenaNoVirtual() == nullptr && pet_db_ != nullptr) {
    delete pet_db_;
  }
  pet_db_ = nullptr;
}
inline const ::PetDB& Role::_internal_pet_db() const {
  const ::PetDB* p = pet_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PetDB*>(
      &::_PetDB_default_instance_);
}
inline const ::PetDB& Role::pet_db() const {
  // @@protoc_insertion_point(field_get:Role.pet_db)
  return _internal_pet_db();
}
inline ::PetDB* Role::release_pet_db() {
  // @@protoc_insertion_point(field_release:Role.pet_db)
  
  ::PetDB* temp = pet_db_;
  pet_db_ = nullptr;
  return temp;
}
inline ::PetDB* Role::_internal_mutable_pet_db() {
  
  if (pet_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::PetDB>(GetArenaNoVirtual());
    pet_db_ = p;
  }
  return pet_db_;
}
inline ::PetDB* Role::mutable_pet_db() {
  // @@protoc_insertion_point(field_mutable:Role.pet_db)
  return _internal_mutable_pet_db();
}
inline void Role::set_allocated_pet_db(::PetDB* pet_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pet_db_;
  }
  if (pet_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pet_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pet_db, submessage_arena);
    }
    
  } else {
    
  }
  pet_db_ = pet_db;
  // @@protoc_insertion_point(field_set_allocated:Role.pet_db)
}

// .TasksDB tasks_db = 82;
inline bool Role::_internal_has_tasks_db() const {
  return this != internal_default_instance() && tasks_db_ != nullptr;
}
inline bool Role::has_tasks_db() const {
  return _internal_has_tasks_db();
}
inline void Role::clear_tasks_db() {
  if (GetArenaNoVirtual() == nullptr && tasks_db_ != nullptr) {
    delete tasks_db_;
  }
  tasks_db_ = nullptr;
}
inline const ::TasksDB& Role::_internal_tasks_db() const {
  const ::TasksDB* p = tasks_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TasksDB*>(
      &::_TasksDB_default_instance_);
}
inline const ::TasksDB& Role::tasks_db() const {
  // @@protoc_insertion_point(field_get:Role.tasks_db)
  return _internal_tasks_db();
}
inline ::TasksDB* Role::release_tasks_db() {
  // @@protoc_insertion_point(field_release:Role.tasks_db)
  
  ::TasksDB* temp = tasks_db_;
  tasks_db_ = nullptr;
  return temp;
}
inline ::TasksDB* Role::_internal_mutable_tasks_db() {
  
  if (tasks_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::TasksDB>(GetArenaNoVirtual());
    tasks_db_ = p;
  }
  return tasks_db_;
}
inline ::TasksDB* Role::mutable_tasks_db() {
  // @@protoc_insertion_point(field_mutable:Role.tasks_db)
  return _internal_mutable_tasks_db();
}
inline void Role::set_allocated_tasks_db(::TasksDB* tasks_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tasks_db_;
  }
  if (tasks_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tasks_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tasks_db, submessage_arena);
    }
    
  } else {
    
  }
  tasks_db_ = tasks_db;
  // @@protoc_insertion_point(field_set_allocated:Role.tasks_db)
}

// .SkillDB skill_db = 83;
inline bool Role::_internal_has_skill_db() const {
  return this != internal_default_instance() && skill_db_ != nullptr;
}
inline bool Role::has_skill_db() const {
  return _internal_has_skill_db();
}
inline void Role::clear_skill_db() {
  if (GetArenaNoVirtual() == nullptr && skill_db_ != nullptr) {
    delete skill_db_;
  }
  skill_db_ = nullptr;
}
inline const ::SkillDB& Role::_internal_skill_db() const {
  const ::SkillDB* p = skill_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SkillDB*>(
      &::_SkillDB_default_instance_);
}
inline const ::SkillDB& Role::skill_db() const {
  // @@protoc_insertion_point(field_get:Role.skill_db)
  return _internal_skill_db();
}
inline ::SkillDB* Role::release_skill_db() {
  // @@protoc_insertion_point(field_release:Role.skill_db)
  
  ::SkillDB* temp = skill_db_;
  skill_db_ = nullptr;
  return temp;
}
inline ::SkillDB* Role::_internal_mutable_skill_db() {
  
  if (skill_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::SkillDB>(GetArenaNoVirtual());
    skill_db_ = p;
  }
  return skill_db_;
}
inline ::SkillDB* Role::mutable_skill_db() {
  // @@protoc_insertion_point(field_mutable:Role.skill_db)
  return _internal_mutable_skill_db();
}
inline void Role::set_allocated_skill_db(::SkillDB* skill_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete skill_db_;
  }
  if (skill_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      skill_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skill_db, submessage_arena);
    }
    
  } else {
    
  }
  skill_db_ = skill_db;
  // @@protoc_insertion_point(field_set_allocated:Role.skill_db)
}

// .BuffDB buff_db = 84;
inline bool Role::_internal_has_buff_db() const {
  return this != internal_default_instance() && buff_db_ != nullptr;
}
inline bool Role::has_buff_db() const {
  return _internal_has_buff_db();
}
inline void Role::clear_buff_db() {
  if (GetArenaNoVirtual() == nullptr && buff_db_ != nullptr) {
    delete buff_db_;
  }
  buff_db_ = nullptr;
}
inline const ::BuffDB& Role::_internal_buff_db() const {
  const ::BuffDB* p = buff_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BuffDB*>(
      &::_BuffDB_default_instance_);
}
inline const ::BuffDB& Role::buff_db() const {
  // @@protoc_insertion_point(field_get:Role.buff_db)
  return _internal_buff_db();
}
inline ::BuffDB* Role::release_buff_db() {
  // @@protoc_insertion_point(field_release:Role.buff_db)
  
  ::BuffDB* temp = buff_db_;
  buff_db_ = nullptr;
  return temp;
}
inline ::BuffDB* Role::_internal_mutable_buff_db() {
  
  if (buff_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::BuffDB>(GetArenaNoVirtual());
    buff_db_ = p;
  }
  return buff_db_;
}
inline ::BuffDB* Role::mutable_buff_db() {
  // @@protoc_insertion_point(field_mutable:Role.buff_db)
  return _internal_mutable_buff_db();
}
inline void Role::set_allocated_buff_db(::BuffDB* buff_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete buff_db_;
  }
  if (buff_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buff_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buff_db, submessage_arena);
    }
    
  } else {
    
  }
  buff_db_ = buff_db;
  // @@protoc_insertion_point(field_set_allocated:Role.buff_db)
}

// .ResourceDB resource_db = 85;
inline bool Role::_internal_has_resource_db() const {
  return this != internal_default_instance() && resource_db_ != nullptr;
}
inline bool Role::has_resource_db() const {
  return _internal_has_resource_db();
}
inline void Role::clear_resource_db() {
  if (GetArenaNoVirtual() == nullptr && resource_db_ != nullptr) {
    delete resource_db_;
  }
  resource_db_ = nullptr;
}
inline const ::ResourceDB& Role::_internal_resource_db() const {
  const ::ResourceDB* p = resource_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResourceDB*>(
      &::_ResourceDB_default_instance_);
}
inline const ::ResourceDB& Role::resource_db() const {
  // @@protoc_insertion_point(field_get:Role.resource_db)
  return _internal_resource_db();
}
inline ::ResourceDB* Role::release_resource_db() {
  // @@protoc_insertion_point(field_release:Role.resource_db)
  
  ::ResourceDB* temp = resource_db_;
  resource_db_ = nullptr;
  return temp;
}
inline ::ResourceDB* Role::_internal_mutable_resource_db() {
  
  if (resource_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResourceDB>(GetArenaNoVirtual());
    resource_db_ = p;
  }
  return resource_db_;
}
inline ::ResourceDB* Role::mutable_resource_db() {
  // @@protoc_insertion_point(field_mutable:Role.resource_db)
  return _internal_mutable_resource_db();
}
inline void Role::set_allocated_resource_db(::ResourceDB* resource_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resource_db_;
  }
  if (resource_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_db, submessage_arena);
    }
    
  } else {
    
  }
  resource_db_ = resource_db;
  // @@protoc_insertion_point(field_set_allocated:Role.resource_db)
}

// .ResourceDB his_resource_db = 86;
inline bool Role::_internal_has_his_resource_db() const {
  return this != internal_default_instance() && his_resource_db_ != nullptr;
}
inline bool Role::has_his_resource_db() const {
  return _internal_has_his_resource_db();
}
inline void Role::clear_his_resource_db() {
  if (GetArenaNoVirtual() == nullptr && his_resource_db_ != nullptr) {
    delete his_resource_db_;
  }
  his_resource_db_ = nullptr;
}
inline const ::ResourceDB& Role::_internal_his_resource_db() const {
  const ::ResourceDB* p = his_resource_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResourceDB*>(
      &::_ResourceDB_default_instance_);
}
inline const ::ResourceDB& Role::his_resource_db() const {
  // @@protoc_insertion_point(field_get:Role.his_resource_db)
  return _internal_his_resource_db();
}
inline ::ResourceDB* Role::release_his_resource_db() {
  // @@protoc_insertion_point(field_release:Role.his_resource_db)
  
  ::ResourceDB* temp = his_resource_db_;
  his_resource_db_ = nullptr;
  return temp;
}
inline ::ResourceDB* Role::_internal_mutable_his_resource_db() {
  
  if (his_resource_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResourceDB>(GetArenaNoVirtual());
    his_resource_db_ = p;
  }
  return his_resource_db_;
}
inline ::ResourceDB* Role::mutable_his_resource_db() {
  // @@protoc_insertion_point(field_mutable:Role.his_resource_db)
  return _internal_mutable_his_resource_db();
}
inline void Role::set_allocated_his_resource_db(::ResourceDB* his_resource_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete his_resource_db_;
  }
  if (his_resource_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      his_resource_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, his_resource_db, submessage_arena);
    }
    
  } else {
    
  }
  his_resource_db_ = his_resource_db;
  // @@protoc_insertion_point(field_set_allocated:Role.his_resource_db)
}

// .ItemDB item_db = 87;
inline bool Role::_internal_has_item_db() const {
  return this != internal_default_instance() && item_db_ != nullptr;
}
inline bool Role::has_item_db() const {
  return _internal_has_item_db();
}
inline void Role::clear_item_db() {
  if (GetArenaNoVirtual() == nullptr && item_db_ != nullptr) {
    delete item_db_;
  }
  item_db_ = nullptr;
}
inline const ::ItemDB& Role::_internal_item_db() const {
  const ::ItemDB* p = item_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ItemDB*>(
      &::_ItemDB_default_instance_);
}
inline const ::ItemDB& Role::item_db() const {
  // @@protoc_insertion_point(field_get:Role.item_db)
  return _internal_item_db();
}
inline ::ItemDB* Role::release_item_db() {
  // @@protoc_insertion_point(field_release:Role.item_db)
  
  ::ItemDB* temp = item_db_;
  item_db_ = nullptr;
  return temp;
}
inline ::ItemDB* Role::_internal_mutable_item_db() {
  
  if (item_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::ItemDB>(GetArenaNoVirtual());
    item_db_ = p;
  }
  return item_db_;
}
inline ::ItemDB* Role::mutable_item_db() {
  // @@protoc_insertion_point(field_mutable:Role.item_db)
  return _internal_mutable_item_db();
}
inline void Role::set_allocated_item_db(::ItemDB* item_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_db_;
  }
  if (item_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_db, submessage_arena);
    }
    
  } else {
    
  }
  item_db_ = item_db;
  // @@protoc_insertion_point(field_set_allocated:Role.item_db)
}

// .EquipDB equip_db = 88;
inline bool Role::_internal_has_equip_db() const {
  return this != internal_default_instance() && equip_db_ != nullptr;
}
inline bool Role::has_equip_db() const {
  return _internal_has_equip_db();
}
inline void Role::clear_equip_db() {
  if (GetArenaNoVirtual() == nullptr && equip_db_ != nullptr) {
    delete equip_db_;
  }
  equip_db_ = nullptr;
}
inline const ::EquipDB& Role::_internal_equip_db() const {
  const ::EquipDB* p = equip_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EquipDB*>(
      &::_EquipDB_default_instance_);
}
inline const ::EquipDB& Role::equip_db() const {
  // @@protoc_insertion_point(field_get:Role.equip_db)
  return _internal_equip_db();
}
inline ::EquipDB* Role::release_equip_db() {
  // @@protoc_insertion_point(field_release:Role.equip_db)
  
  ::EquipDB* temp = equip_db_;
  equip_db_ = nullptr;
  return temp;
}
inline ::EquipDB* Role::_internal_mutable_equip_db() {
  
  if (equip_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::EquipDB>(GetArenaNoVirtual());
    equip_db_ = p;
  }
  return equip_db_;
}
inline ::EquipDB* Role::mutable_equip_db() {
  // @@protoc_insertion_point(field_mutable:Role.equip_db)
  return _internal_mutable_equip_db();
}
inline void Role::set_allocated_equip_db(::EquipDB* equip_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete equip_db_;
  }
  if (equip_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      equip_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equip_db, submessage_arena);
    }
    
  } else {
    
  }
  equip_db_ = equip_db;
  // @@protoc_insertion_point(field_set_allocated:Role.equip_db)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameDB_2eproto
