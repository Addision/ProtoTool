// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chat_2eproto;
class Chat_ChatReply;
class Chat_ChatReplyDefaultTypeInternal;
extern Chat_ChatReplyDefaultTypeInternal _Chat_ChatReply_default_instance_;
class Chat_ChatReq;
class Chat_ChatReqDefaultTypeInternal;
extern Chat_ChatReqDefaultTypeInternal _Chat_ChatReq_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Chat_ChatReply* Arena::CreateMaybeMessage<::Chat_ChatReply>(Arena*);
template<> ::Chat_ChatReq* Arena::CreateMaybeMessage<::Chat_ChatReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Chat_ChatReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat_ChatReq) */ {
 public:
  Chat_ChatReq();
  virtual ~Chat_ChatReq();

  Chat_ChatReq(const Chat_ChatReq& from);
  Chat_ChatReq(Chat_ChatReq&& from) noexcept
    : Chat_ChatReq() {
    *this = ::std::move(from);
  }

  inline Chat_ChatReq& operator=(const Chat_ChatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_ChatReq& operator=(Chat_ChatReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat_ChatReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat_ChatReq* internal_default_instance() {
    return reinterpret_cast<const Chat_ChatReq*>(
               &_Chat_ChatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chat_ChatReq& a, Chat_ChatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_ChatReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat_ChatReq* New() const final {
    return CreateMaybeMessage<Chat_ChatReq>(nullptr);
  }

  Chat_ChatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat_ChatReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat_ChatReq& from);
  void MergeFrom(const Chat_ChatReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_ChatReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat_ChatReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 2,
    kChannelFieldNumber = 1,
  };
  // string chat_msg = 2;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const char* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // int32 channel = 1;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat_ChatReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class Chat_ChatReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat_ChatReply) */ {
 public:
  Chat_ChatReply();
  virtual ~Chat_ChatReply();

  Chat_ChatReply(const Chat_ChatReply& from);
  Chat_ChatReply(Chat_ChatReply&& from) noexcept
    : Chat_ChatReply() {
    *this = ::std::move(from);
  }

  inline Chat_ChatReply& operator=(const Chat_ChatReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_ChatReply& operator=(Chat_ChatReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat_ChatReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat_ChatReply* internal_default_instance() {
    return reinterpret_cast<const Chat_ChatReply*>(
               &_Chat_ChatReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Chat_ChatReply& a, Chat_ChatReply& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_ChatReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat_ChatReply* New() const final {
    return CreateMaybeMessage<Chat_ChatReply>(nullptr);
  }

  Chat_ChatReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat_ChatReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat_ChatReply& from);
  void MergeFrom(const Chat_ChatReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_ChatReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat_ChatReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chat_2eproto);
    return ::descriptor_table_Chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // string chat_msg = 2;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const char* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat_ChatReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chat_ChatReq

// int32 channel = 1;
inline void Chat_ChatReq::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chat_ChatReq::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chat_ChatReq::channel() const {
  // @@protoc_insertion_point(field_get:Chat_ChatReq.channel)
  return _internal_channel();
}
inline void Chat_ChatReq::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void Chat_ChatReq::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:Chat_ChatReq.channel)
}

// string chat_msg = 2;
inline void Chat_ChatReq::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat_ChatReq::chat_msg() const {
  // @@protoc_insertion_point(field_get:Chat_ChatReq.chat_msg)
  return _internal_chat_msg();
}
inline void Chat_ChatReq::set_chat_msg(const std::string& value) {
  _internal_set_chat_msg(value);
  // @@protoc_insertion_point(field_set:Chat_ChatReq.chat_msg)
}
inline std::string* Chat_ChatReq::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:Chat_ChatReq.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& Chat_ChatReq::_internal_chat_msg() const {
  return chat_msg_.GetNoArena();
}
inline void Chat_ChatReq::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat_ChatReq::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat_ChatReq.chat_msg)
}
inline void Chat_ChatReq::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat_ChatReq.chat_msg)
}
inline void Chat_ChatReq::set_chat_msg(const char* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat_ChatReq.chat_msg)
}
inline std::string* Chat_ChatReq::_internal_mutable_chat_msg() {
  
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat_ChatReq::release_chat_msg() {
  // @@protoc_insertion_point(field_release:Chat_ChatReq.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat_ChatReq::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:Chat_ChatReq.chat_msg)
}

// -------------------------------------------------------------------

// Chat_ChatReply

// int32 ret = 1;
inline void Chat_ChatReply::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chat_ChatReply::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chat_ChatReply::ret() const {
  // @@protoc_insertion_point(field_get:Chat_ChatReply.ret)
  return _internal_ret();
}
inline void Chat_ChatReply::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void Chat_ChatReply::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Chat_ChatReply.ret)
}

// string chat_msg = 2;
inline void Chat_ChatReply::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat_ChatReply::chat_msg() const {
  // @@protoc_insertion_point(field_get:Chat_ChatReply.chat_msg)
  return _internal_chat_msg();
}
inline void Chat_ChatReply::set_chat_msg(const std::string& value) {
  _internal_set_chat_msg(value);
  // @@protoc_insertion_point(field_set:Chat_ChatReply.chat_msg)
}
inline std::string* Chat_ChatReply::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:Chat_ChatReply.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& Chat_ChatReply::_internal_chat_msg() const {
  return chat_msg_.GetNoArena();
}
inline void Chat_ChatReply::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat_ChatReply::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat_ChatReply.chat_msg)
}
inline void Chat_ChatReply::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat_ChatReply.chat_msg)
}
inline void Chat_ChatReply::set_chat_msg(const char* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat_ChatReply.chat_msg)
}
inline std::string* Chat_ChatReply::_internal_mutable_chat_msg() {
  
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat_ChatReply::release_chat_msg() {
  // @@protoc_insertion_point(field_release:Chat_ChatReply.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat_ChatReply::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:Chat_ChatReply.chat_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
