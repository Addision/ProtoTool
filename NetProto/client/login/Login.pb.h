// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_2eproto;
class Login_CreateRoleReply;
class Login_CreateRoleReplyDefaultTypeInternal;
extern Login_CreateRoleReplyDefaultTypeInternal _Login_CreateRoleReply_default_instance_;
class Login_CreateRoleReq;
class Login_CreateRoleReqDefaultTypeInternal;
extern Login_CreateRoleReqDefaultTypeInternal _Login_CreateRoleReq_default_instance_;
class Login_DelRoleReply;
class Login_DelRoleReplyDefaultTypeInternal;
extern Login_DelRoleReplyDefaultTypeInternal _Login_DelRoleReply_default_instance_;
class Login_DelRoleReq;
class Login_DelRoleReqDefaultTypeInternal;
extern Login_DelRoleReqDefaultTypeInternal _Login_DelRoleReq_default_instance_;
class Login_LoginReply;
class Login_LoginReplyDefaultTypeInternal;
extern Login_LoginReplyDefaultTypeInternal _Login_LoginReply_default_instance_;
class Login_LoginReq;
class Login_LoginReqDefaultTypeInternal;
extern Login_LoginReqDefaultTypeInternal _Login_LoginReq_default_instance_;
class Login_SelectRoleReply;
class Login_SelectRoleReplyDefaultTypeInternal;
extern Login_SelectRoleReplyDefaultTypeInternal _Login_SelectRoleReply_default_instance_;
class Login_SelectRoleReq;
class Login_SelectRoleReqDefaultTypeInternal;
extern Login_SelectRoleReqDefaultTypeInternal _Login_SelectRoleReq_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Login_CreateRoleReply* Arena::CreateMaybeMessage<::Login_CreateRoleReply>(Arena*);
template<> ::Login_CreateRoleReq* Arena::CreateMaybeMessage<::Login_CreateRoleReq>(Arena*);
template<> ::Login_DelRoleReply* Arena::CreateMaybeMessage<::Login_DelRoleReply>(Arena*);
template<> ::Login_DelRoleReq* Arena::CreateMaybeMessage<::Login_DelRoleReq>(Arena*);
template<> ::Login_LoginReply* Arena::CreateMaybeMessage<::Login_LoginReply>(Arena*);
template<> ::Login_LoginReq* Arena::CreateMaybeMessage<::Login_LoginReq>(Arena*);
template<> ::Login_SelectRoleReply* Arena::CreateMaybeMessage<::Login_SelectRoleReply>(Arena*);
template<> ::Login_SelectRoleReq* Arena::CreateMaybeMessage<::Login_SelectRoleReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Login_LoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_LoginReq) */ {
 public:
  Login_LoginReq();
  virtual ~Login_LoginReq();

  Login_LoginReq(const Login_LoginReq& from);
  Login_LoginReq(Login_LoginReq&& from) noexcept
    : Login_LoginReq() {
    *this = ::std::move(from);
  }

  inline Login_LoginReq& operator=(const Login_LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_LoginReq& operator=(Login_LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login_LoginReq* internal_default_instance() {
    return reinterpret_cast<const Login_LoginReq*>(
               &_Login_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login_LoginReq& a, Login_LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_LoginReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_LoginReq* New() const final {
    return CreateMaybeMessage<Login_LoginReq>(nullptr);
  }

  Login_LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_LoginReq& from);
  void MergeFrom(const Login_LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_LoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginNameFieldNumber = 1,
    kLoginPwdFieldNumber = 2,
    kGameIdFieldNumber = 3,
    kOpenIdFieldNumber = 4,
    kTokenFieldNumber = 5,
    kChannelIdFieldNumber = 6,
    kSnidFieldNumber = 7,
    kMacFieldNumber = 8,
  };
  // bytes login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const void* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // bytes login_pwd = 2;
  void clear_login_pwd();
  const std::string& login_pwd() const;
  void set_login_pwd(const std::string& value);
  void set_login_pwd(std::string&& value);
  void set_login_pwd(const char* value);
  void set_login_pwd(const void* value, size_t size);
  std::string* mutable_login_pwd();
  std::string* release_login_pwd();
  void set_allocated_login_pwd(std::string* login_pwd);
  private:
  const std::string& _internal_login_pwd() const;
  void _internal_set_login_pwd(const std::string& value);
  std::string* _internal_mutable_login_pwd();
  public:

  // bytes game_id = 3;
  void clear_game_id();
  const std::string& game_id() const;
  void set_game_id(const std::string& value);
  void set_game_id(std::string&& value);
  void set_game_id(const char* value);
  void set_game_id(const void* value, size_t size);
  std::string* mutable_game_id();
  std::string* release_game_id();
  void set_allocated_game_id(std::string* game_id);
  private:
  const std::string& _internal_game_id() const;
  void _internal_set_game_id(const std::string& value);
  std::string* _internal_mutable_game_id();
  public:

  // bytes open_id = 4;
  void clear_open_id();
  const std::string& open_id() const;
  void set_open_id(const std::string& value);
  void set_open_id(std::string&& value);
  void set_open_id(const char* value);
  void set_open_id(const void* value, size_t size);
  std::string* mutable_open_id();
  std::string* release_open_id();
  void set_allocated_open_id(std::string* open_id);
  private:
  const std::string& _internal_open_id() const;
  void _internal_set_open_id(const std::string& value);
  std::string* _internal_mutable_open_id();
  public:

  // bytes token = 5;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // bytes channel_id = 6;
  void clear_channel_id();
  const std::string& channel_id() const;
  void set_channel_id(const std::string& value);
  void set_channel_id(std::string&& value);
  void set_channel_id(const char* value);
  void set_channel_id(const void* value, size_t size);
  std::string* mutable_channel_id();
  std::string* release_channel_id();
  void set_allocated_channel_id(std::string* channel_id);
  private:
  const std::string& _internal_channel_id() const;
  void _internal_set_channel_id(const std::string& value);
  std::string* _internal_mutable_channel_id();
  public:

  // bytes snid = 7;
  void clear_snid();
  const std::string& snid() const;
  void set_snid(const std::string& value);
  void set_snid(std::string&& value);
  void set_snid(const char* value);
  void set_snid(const void* value, size_t size);
  std::string* mutable_snid();
  std::string* release_snid();
  void set_allocated_snid(std::string* snid);
  private:
  const std::string& _internal_snid() const;
  void _internal_set_snid(const std::string& value);
  std::string* _internal_mutable_snid();
  public:

  // bytes mac = 8;
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const void* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // @@protoc_insertion_point(class_scope:Login_LoginReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class Login_LoginReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_LoginReply) */ {
 public:
  Login_LoginReply();
  virtual ~Login_LoginReply();

  Login_LoginReply(const Login_LoginReply& from);
  Login_LoginReply(Login_LoginReply&& from) noexcept
    : Login_LoginReply() {
    *this = ::std::move(from);
  }

  inline Login_LoginReply& operator=(const Login_LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_LoginReply& operator=(Login_LoginReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_LoginReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login_LoginReply* internal_default_instance() {
    return reinterpret_cast<const Login_LoginReply*>(
               &_Login_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Login_LoginReply& a, Login_LoginReply& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_LoginReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_LoginReply* New() const final {
    return CreateMaybeMessage<Login_LoginReply>(nullptr);
  }

  Login_LoginReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_LoginReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_LoginReply& from);
  void MergeFrom(const Login_LoginReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_LoginReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_LoginReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Login_LoginReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class Login_CreateRoleReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_CreateRoleReq) */ {
 public:
  Login_CreateRoleReq();
  virtual ~Login_CreateRoleReq();

  Login_CreateRoleReq(const Login_CreateRoleReq& from);
  Login_CreateRoleReq(Login_CreateRoleReq&& from) noexcept
    : Login_CreateRoleReq() {
    *this = ::std::move(from);
  }

  inline Login_CreateRoleReq& operator=(const Login_CreateRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_CreateRoleReq& operator=(Login_CreateRoleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_CreateRoleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login_CreateRoleReq* internal_default_instance() {
    return reinterpret_cast<const Login_CreateRoleReq*>(
               &_Login_CreateRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Login_CreateRoleReq& a, Login_CreateRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_CreateRoleReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_CreateRoleReq* New() const final {
    return CreateMaybeMessage<Login_CreateRoleReq>(nullptr);
  }

  Login_CreateRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_CreateRoleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_CreateRoleReq& from);
  void MergeFrom(const Login_CreateRoleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_CreateRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_CreateRoleReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kSexFieldNumber = 3,
  };
  // bytes nick_name = 2;
  void clear_nick_name();
  const std::string& nick_name() const;
  void set_nick_name(const std::string& value);
  void set_nick_name(std::string&& value);
  void set_nick_name(const char* value);
  void set_nick_name(const void* value, size_t size);
  std::string* mutable_nick_name();
  std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int32 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sex = 3;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Login_CreateRoleReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class Login_CreateRoleReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_CreateRoleReply) */ {
 public:
  Login_CreateRoleReply();
  virtual ~Login_CreateRoleReply();

  Login_CreateRoleReply(const Login_CreateRoleReply& from);
  Login_CreateRoleReply(Login_CreateRoleReply&& from) noexcept
    : Login_CreateRoleReply() {
    *this = ::std::move(from);
  }

  inline Login_CreateRoleReply& operator=(const Login_CreateRoleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_CreateRoleReply& operator=(Login_CreateRoleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_CreateRoleReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login_CreateRoleReply* internal_default_instance() {
    return reinterpret_cast<const Login_CreateRoleReply*>(
               &_Login_CreateRoleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Login_CreateRoleReply& a, Login_CreateRoleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_CreateRoleReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_CreateRoleReply* New() const final {
    return CreateMaybeMessage<Login_CreateRoleReply>(nullptr);
  }

  Login_CreateRoleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_CreateRoleReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_CreateRoleReply& from);
  void MergeFrom(const Login_CreateRoleReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_CreateRoleReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_CreateRoleReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Login_CreateRoleReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class Login_SelectRoleReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_SelectRoleReq) */ {
 public:
  Login_SelectRoleReq();
  virtual ~Login_SelectRoleReq();

  Login_SelectRoleReq(const Login_SelectRoleReq& from);
  Login_SelectRoleReq(Login_SelectRoleReq&& from) noexcept
    : Login_SelectRoleReq() {
    *this = ::std::move(from);
  }

  inline Login_SelectRoleReq& operator=(const Login_SelectRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_SelectRoleReq& operator=(Login_SelectRoleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_SelectRoleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login_SelectRoleReq* internal_default_instance() {
    return reinterpret_cast<const Login_SelectRoleReq*>(
               &_Login_SelectRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Login_SelectRoleReq& a, Login_SelectRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_SelectRoleReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_SelectRoleReq* New() const final {
    return CreateMaybeMessage<Login_SelectRoleReq>(nullptr);
  }

  Login_SelectRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_SelectRoleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_SelectRoleReq& from);
  void MergeFrom(const Login_SelectRoleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_SelectRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_SelectRoleReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // int32 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Login_SelectRoleReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class Login_SelectRoleReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_SelectRoleReply) */ {
 public:
  Login_SelectRoleReply();
  virtual ~Login_SelectRoleReply();

  Login_SelectRoleReply(const Login_SelectRoleReply& from);
  Login_SelectRoleReply(Login_SelectRoleReply&& from) noexcept
    : Login_SelectRoleReply() {
    *this = ::std::move(from);
  }

  inline Login_SelectRoleReply& operator=(const Login_SelectRoleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_SelectRoleReply& operator=(Login_SelectRoleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_SelectRoleReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login_SelectRoleReply* internal_default_instance() {
    return reinterpret_cast<const Login_SelectRoleReply*>(
               &_Login_SelectRoleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Login_SelectRoleReply& a, Login_SelectRoleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_SelectRoleReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_SelectRoleReply* New() const final {
    return CreateMaybeMessage<Login_SelectRoleReply>(nullptr);
  }

  Login_SelectRoleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_SelectRoleReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_SelectRoleReply& from);
  void MergeFrom(const Login_SelectRoleReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_SelectRoleReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_SelectRoleReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Login_SelectRoleReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class Login_DelRoleReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_DelRoleReq) */ {
 public:
  Login_DelRoleReq();
  virtual ~Login_DelRoleReq();

  Login_DelRoleReq(const Login_DelRoleReq& from);
  Login_DelRoleReq(Login_DelRoleReq&& from) noexcept
    : Login_DelRoleReq() {
    *this = ::std::move(from);
  }

  inline Login_DelRoleReq& operator=(const Login_DelRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_DelRoleReq& operator=(Login_DelRoleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_DelRoleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login_DelRoleReq* internal_default_instance() {
    return reinterpret_cast<const Login_DelRoleReq*>(
               &_Login_DelRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Login_DelRoleReq& a, Login_DelRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_DelRoleReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_DelRoleReq* New() const final {
    return CreateMaybeMessage<Login_DelRoleReq>(nullptr);
  }

  Login_DelRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_DelRoleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_DelRoleReq& from);
  void MergeFrom(const Login_DelRoleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_DelRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_DelRoleReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // int32 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Login_DelRoleReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class Login_DelRoleReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_DelRoleReply) */ {
 public:
  Login_DelRoleReply();
  virtual ~Login_DelRoleReply();

  Login_DelRoleReply(const Login_DelRoleReply& from);
  Login_DelRoleReply(Login_DelRoleReply&& from) noexcept
    : Login_DelRoleReply() {
    *this = ::std::move(from);
  }

  inline Login_DelRoleReply& operator=(const Login_DelRoleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_DelRoleReply& operator=(Login_DelRoleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_DelRoleReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login_DelRoleReply* internal_default_instance() {
    return reinterpret_cast<const Login_DelRoleReply*>(
               &_Login_DelRoleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Login_DelRoleReply& a, Login_DelRoleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_DelRoleReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_DelRoleReply* New() const final {
    return CreateMaybeMessage<Login_DelRoleReply>(nullptr);
  }

  Login_DelRoleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_DelRoleReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_DelRoleReply& from);
  void MergeFrom(const Login_DelRoleReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_DelRoleReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_DelRoleReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Login_DelRoleReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login_LoginReq

// bytes login_name = 1;
inline void Login_LoginReq::clear_login_name() {
  login_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login_LoginReq::login_name() const {
  // @@protoc_insertion_point(field_get:Login_LoginReq.login_name)
  return _internal_login_name();
}
inline void Login_LoginReq::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:Login_LoginReq.login_name)
}
inline std::string* Login_LoginReq::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:Login_LoginReq.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& Login_LoginReq::_internal_login_name() const {
  return login_name_.GetNoArena();
}
inline void Login_LoginReq::_internal_set_login_name(const std::string& value) {
  
  login_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login_LoginReq::set_login_name(std::string&& value) {
  
  login_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login_LoginReq.login_name)
}
inline void Login_LoginReq::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login_LoginReq.login_name)
}
inline void Login_LoginReq::set_login_name(const void* value, size_t size) {
  
  login_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login_LoginReq.login_name)
}
inline std::string* Login_LoginReq::_internal_mutable_login_name() {
  
  return login_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login_LoginReq::release_login_name() {
  // @@protoc_insertion_point(field_release:Login_LoginReq.login_name)
  
  return login_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login_LoginReq::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name);
  // @@protoc_insertion_point(field_set_allocated:Login_LoginReq.login_name)
}

// bytes login_pwd = 2;
inline void Login_LoginReq::clear_login_pwd() {
  login_pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login_LoginReq::login_pwd() const {
  // @@protoc_insertion_point(field_get:Login_LoginReq.login_pwd)
  return _internal_login_pwd();
}
inline void Login_LoginReq::set_login_pwd(const std::string& value) {
  _internal_set_login_pwd(value);
  // @@protoc_insertion_point(field_set:Login_LoginReq.login_pwd)
}
inline std::string* Login_LoginReq::mutable_login_pwd() {
  // @@protoc_insertion_point(field_mutable:Login_LoginReq.login_pwd)
  return _internal_mutable_login_pwd();
}
inline const std::string& Login_LoginReq::_internal_login_pwd() const {
  return login_pwd_.GetNoArena();
}
inline void Login_LoginReq::_internal_set_login_pwd(const std::string& value) {
  
  login_pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login_LoginReq::set_login_pwd(std::string&& value) {
  
  login_pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login_LoginReq.login_pwd)
}
inline void Login_LoginReq::set_login_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login_LoginReq.login_pwd)
}
inline void Login_LoginReq::set_login_pwd(const void* value, size_t size) {
  
  login_pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login_LoginReq.login_pwd)
}
inline std::string* Login_LoginReq::_internal_mutable_login_pwd() {
  
  return login_pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login_LoginReq::release_login_pwd() {
  // @@protoc_insertion_point(field_release:Login_LoginReq.login_pwd)
  
  return login_pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login_LoginReq::set_allocated_login_pwd(std::string* login_pwd) {
  if (login_pwd != nullptr) {
    
  } else {
    
  }
  login_pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_pwd);
  // @@protoc_insertion_point(field_set_allocated:Login_LoginReq.login_pwd)
}

// bytes game_id = 3;
inline void Login_LoginReq::clear_game_id() {
  game_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login_LoginReq::game_id() const {
  // @@protoc_insertion_point(field_get:Login_LoginReq.game_id)
  return _internal_game_id();
}
inline void Login_LoginReq::set_game_id(const std::string& value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:Login_LoginReq.game_id)
}
inline std::string* Login_LoginReq::mutable_game_id() {
  // @@protoc_insertion_point(field_mutable:Login_LoginReq.game_id)
  return _internal_mutable_game_id();
}
inline const std::string& Login_LoginReq::_internal_game_id() const {
  return game_id_.GetNoArena();
}
inline void Login_LoginReq::_internal_set_game_id(const std::string& value) {
  
  game_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login_LoginReq::set_game_id(std::string&& value) {
  
  game_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login_LoginReq.game_id)
}
inline void Login_LoginReq::set_game_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  game_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login_LoginReq.game_id)
}
inline void Login_LoginReq::set_game_id(const void* value, size_t size) {
  
  game_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login_LoginReq.game_id)
}
inline std::string* Login_LoginReq::_internal_mutable_game_id() {
  
  return game_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login_LoginReq::release_game_id() {
  // @@protoc_insertion_point(field_release:Login_LoginReq.game_id)
  
  return game_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login_LoginReq::set_allocated_game_id(std::string* game_id) {
  if (game_id != nullptr) {
    
  } else {
    
  }
  game_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_id);
  // @@protoc_insertion_point(field_set_allocated:Login_LoginReq.game_id)
}

// bytes open_id = 4;
inline void Login_LoginReq::clear_open_id() {
  open_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login_LoginReq::open_id() const {
  // @@protoc_insertion_point(field_get:Login_LoginReq.open_id)
  return _internal_open_id();
}
inline void Login_LoginReq::set_open_id(const std::string& value) {
  _internal_set_open_id(value);
  // @@protoc_insertion_point(field_set:Login_LoginReq.open_id)
}
inline std::string* Login_LoginReq::mutable_open_id() {
  // @@protoc_insertion_point(field_mutable:Login_LoginReq.open_id)
  return _internal_mutable_open_id();
}
inline const std::string& Login_LoginReq::_internal_open_id() const {
  return open_id_.GetNoArena();
}
inline void Login_LoginReq::_internal_set_open_id(const std::string& value) {
  
  open_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login_LoginReq::set_open_id(std::string&& value) {
  
  open_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login_LoginReq.open_id)
}
inline void Login_LoginReq::set_open_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  open_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login_LoginReq.open_id)
}
inline void Login_LoginReq::set_open_id(const void* value, size_t size) {
  
  open_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login_LoginReq.open_id)
}
inline std::string* Login_LoginReq::_internal_mutable_open_id() {
  
  return open_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login_LoginReq::release_open_id() {
  // @@protoc_insertion_point(field_release:Login_LoginReq.open_id)
  
  return open_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login_LoginReq::set_allocated_open_id(std::string* open_id) {
  if (open_id != nullptr) {
    
  } else {
    
  }
  open_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_id);
  // @@protoc_insertion_point(field_set_allocated:Login_LoginReq.open_id)
}

// bytes token = 5;
inline void Login_LoginReq::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login_LoginReq::token() const {
  // @@protoc_insertion_point(field_get:Login_LoginReq.token)
  return _internal_token();
}
inline void Login_LoginReq::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:Login_LoginReq.token)
}
inline std::string* Login_LoginReq::mutable_token() {
  // @@protoc_insertion_point(field_mutable:Login_LoginReq.token)
  return _internal_mutable_token();
}
inline const std::string& Login_LoginReq::_internal_token() const {
  return token_.GetNoArena();
}
inline void Login_LoginReq::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login_LoginReq::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login_LoginReq.token)
}
inline void Login_LoginReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login_LoginReq.token)
}
inline void Login_LoginReq::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login_LoginReq.token)
}
inline std::string* Login_LoginReq::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login_LoginReq::release_token() {
  // @@protoc_insertion_point(field_release:Login_LoginReq.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login_LoginReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Login_LoginReq.token)
}

// bytes channel_id = 6;
inline void Login_LoginReq::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login_LoginReq::channel_id() const {
  // @@protoc_insertion_point(field_get:Login_LoginReq.channel_id)
  return _internal_channel_id();
}
inline void Login_LoginReq::set_channel_id(const std::string& value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:Login_LoginReq.channel_id)
}
inline std::string* Login_LoginReq::mutable_channel_id() {
  // @@protoc_insertion_point(field_mutable:Login_LoginReq.channel_id)
  return _internal_mutable_channel_id();
}
inline const std::string& Login_LoginReq::_internal_channel_id() const {
  return channel_id_.GetNoArena();
}
inline void Login_LoginReq::_internal_set_channel_id(const std::string& value) {
  
  channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login_LoginReq::set_channel_id(std::string&& value) {
  
  channel_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login_LoginReq.channel_id)
}
inline void Login_LoginReq::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login_LoginReq.channel_id)
}
inline void Login_LoginReq::set_channel_id(const void* value, size_t size) {
  
  channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login_LoginReq.channel_id)
}
inline std::string* Login_LoginReq::_internal_mutable_channel_id() {
  
  return channel_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login_LoginReq::release_channel_id() {
  // @@protoc_insertion_point(field_release:Login_LoginReq.channel_id)
  
  return channel_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login_LoginReq::set_allocated_channel_id(std::string* channel_id) {
  if (channel_id != nullptr) {
    
  } else {
    
  }
  channel_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:Login_LoginReq.channel_id)
}

// bytes snid = 7;
inline void Login_LoginReq::clear_snid() {
  snid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login_LoginReq::snid() const {
  // @@protoc_insertion_point(field_get:Login_LoginReq.snid)
  return _internal_snid();
}
inline void Login_LoginReq::set_snid(const std::string& value) {
  _internal_set_snid(value);
  // @@protoc_insertion_point(field_set:Login_LoginReq.snid)
}
inline std::string* Login_LoginReq::mutable_snid() {
  // @@protoc_insertion_point(field_mutable:Login_LoginReq.snid)
  return _internal_mutable_snid();
}
inline const std::string& Login_LoginReq::_internal_snid() const {
  return snid_.GetNoArena();
}
inline void Login_LoginReq::_internal_set_snid(const std::string& value) {
  
  snid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login_LoginReq::set_snid(std::string&& value) {
  
  snid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login_LoginReq.snid)
}
inline void Login_LoginReq::set_snid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login_LoginReq.snid)
}
inline void Login_LoginReq::set_snid(const void* value, size_t size) {
  
  snid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login_LoginReq.snid)
}
inline std::string* Login_LoginReq::_internal_mutable_snid() {
  
  return snid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login_LoginReq::release_snid() {
  // @@protoc_insertion_point(field_release:Login_LoginReq.snid)
  
  return snid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login_LoginReq::set_allocated_snid(std::string* snid) {
  if (snid != nullptr) {
    
  } else {
    
  }
  snid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snid);
  // @@protoc_insertion_point(field_set_allocated:Login_LoginReq.snid)
}

// bytes mac = 8;
inline void Login_LoginReq::clear_mac() {
  mac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login_LoginReq::mac() const {
  // @@protoc_insertion_point(field_get:Login_LoginReq.mac)
  return _internal_mac();
}
inline void Login_LoginReq::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:Login_LoginReq.mac)
}
inline std::string* Login_LoginReq::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:Login_LoginReq.mac)
  return _internal_mutable_mac();
}
inline const std::string& Login_LoginReq::_internal_mac() const {
  return mac_.GetNoArena();
}
inline void Login_LoginReq::_internal_set_mac(const std::string& value) {
  
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login_LoginReq::set_mac(std::string&& value) {
  
  mac_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login_LoginReq.mac)
}
inline void Login_LoginReq::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login_LoginReq.mac)
}
inline void Login_LoginReq::set_mac(const void* value, size_t size) {
  
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login_LoginReq.mac)
}
inline std::string* Login_LoginReq::_internal_mutable_mac() {
  
  return mac_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login_LoginReq::release_mac() {
  // @@protoc_insertion_point(field_release:Login_LoginReq.mac)
  
  return mac_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login_LoginReq::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:Login_LoginReq.mac)
}

// -------------------------------------------------------------------

// Login_LoginReply

// int32 ret = 1;
inline void Login_LoginReply::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_LoginReply::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_LoginReply::ret() const {
  // @@protoc_insertion_point(field_get:Login_LoginReply.ret)
  return _internal_ret();
}
inline void Login_LoginReply::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void Login_LoginReply::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Login_LoginReply.ret)
}

// -------------------------------------------------------------------

// Login_CreateRoleReq

// int32 role_id = 1;
inline void Login_CreateRoleReq::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_CreateRoleReq::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_CreateRoleReq::role_id() const {
  // @@protoc_insertion_point(field_get:Login_CreateRoleReq.role_id)
  return _internal_role_id();
}
inline void Login_CreateRoleReq::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
}
inline void Login_CreateRoleReq::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Login_CreateRoleReq.role_id)
}

// bytes nick_name = 2;
inline void Login_CreateRoleReq::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login_CreateRoleReq::nick_name() const {
  // @@protoc_insertion_point(field_get:Login_CreateRoleReq.nick_name)
  return _internal_nick_name();
}
inline void Login_CreateRoleReq::set_nick_name(const std::string& value) {
  _internal_set_nick_name(value);
  // @@protoc_insertion_point(field_set:Login_CreateRoleReq.nick_name)
}
inline std::string* Login_CreateRoleReq::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable:Login_CreateRoleReq.nick_name)
  return _internal_mutable_nick_name();
}
inline const std::string& Login_CreateRoleReq::_internal_nick_name() const {
  return nick_name_.GetNoArena();
}
inline void Login_CreateRoleReq::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login_CreateRoleReq::set_nick_name(std::string&& value) {
  
  nick_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login_CreateRoleReq.nick_name)
}
inline void Login_CreateRoleReq::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login_CreateRoleReq.nick_name)
}
inline void Login_CreateRoleReq::set_nick_name(const void* value, size_t size) {
  
  nick_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login_CreateRoleReq.nick_name)
}
inline std::string* Login_CreateRoleReq::_internal_mutable_nick_name() {
  
  return nick_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login_CreateRoleReq::release_nick_name() {
  // @@protoc_insertion_point(field_release:Login_CreateRoleReq.nick_name)
  
  return nick_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login_CreateRoleReq::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:Login_CreateRoleReq.nick_name)
}

// int32 sex = 3;
inline void Login_CreateRoleReq::clear_sex() {
  sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_CreateRoleReq::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_CreateRoleReq::sex() const {
  // @@protoc_insertion_point(field_get:Login_CreateRoleReq.sex)
  return _internal_sex();
}
inline void Login_CreateRoleReq::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sex_ = value;
}
inline void Login_CreateRoleReq::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:Login_CreateRoleReq.sex)
}

// -------------------------------------------------------------------

// Login_CreateRoleReply

// int32 ret = 1;
inline void Login_CreateRoleReply::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_CreateRoleReply::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_CreateRoleReply::ret() const {
  // @@protoc_insertion_point(field_get:Login_CreateRoleReply.ret)
  return _internal_ret();
}
inline void Login_CreateRoleReply::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void Login_CreateRoleReply::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Login_CreateRoleReply.ret)
}

// -------------------------------------------------------------------

// Login_SelectRoleReq

// int32 role_id = 1;
inline void Login_SelectRoleReq::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_SelectRoleReq::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_SelectRoleReq::role_id() const {
  // @@protoc_insertion_point(field_get:Login_SelectRoleReq.role_id)
  return _internal_role_id();
}
inline void Login_SelectRoleReq::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
}
inline void Login_SelectRoleReq::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Login_SelectRoleReq.role_id)
}

// -------------------------------------------------------------------

// Login_SelectRoleReply

// int32 ret = 1;
inline void Login_SelectRoleReply::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_SelectRoleReply::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_SelectRoleReply::ret() const {
  // @@protoc_insertion_point(field_get:Login_SelectRoleReply.ret)
  return _internal_ret();
}
inline void Login_SelectRoleReply::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void Login_SelectRoleReply::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Login_SelectRoleReply.ret)
}

// -------------------------------------------------------------------

// Login_DelRoleReq

// int32 role_id = 1;
inline void Login_DelRoleReq::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_DelRoleReq::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_DelRoleReq::role_id() const {
  // @@protoc_insertion_point(field_get:Login_DelRoleReq.role_id)
  return _internal_role_id();
}
inline void Login_DelRoleReq::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
}
inline void Login_DelRoleReq::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Login_DelRoleReq.role_id)
}

// -------------------------------------------------------------------

// Login_DelRoleReply

// int32 ret = 1;
inline void Login_DelRoleReply::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_DelRoleReply::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_DelRoleReply::ret() const {
  // @@protoc_insertion_point(field_get:Login_DelRoleReply.ret)
  return _internal_ret();
}
inline void Login_DelRoleReply::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void Login_DelRoleReply::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Login_DelRoleReply.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
